(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("jQuery"));
	else if(typeof define === 'function' && define.amd)
		define("IWT", ["jQuery"], factory);
	else if(typeof exports === 'object')
		exports["IWT"] = factory(require("jQuery"));
	else
		root["IWT"] = factory(root["jQuery"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_0__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonpIWT"];
/******/ 	window["webpackJsonpIWT"] = function webpackJsonpCallback(chunkIds, moreModules, executeModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [], result;
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules, executeModules);
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 	};
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// objects to store loaded and loading chunks
/******/ 	var installedChunks = {
/******/ 		4: 0
/******/ 	};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		var installedChunkData = installedChunks[chunkId];
/******/ 		if(installedChunkData === 0) {
/******/ 			return new Promise(function(resolve) { resolve(); });
/******/ 		}
/******/
/******/ 		// a Promise means "currently loading".
/******/ 		if(installedChunkData) {
/******/ 			return installedChunkData[2];
/******/ 		}
/******/
/******/ 		// setup Promise in chunk cache
/******/ 		var promise = new Promise(function(resolve, reject) {
/******/ 			installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 		});
/******/ 		installedChunkData[2] = promise;
/******/
/******/ 		// start chunk loading
/******/ 		var head = document.getElementsByTagName('head')[0];
/******/ 		var script = document.createElement('script');
/******/ 		script.type = 'text/javascript';
/******/ 		script.charset = 'utf-8';
/******/ 		script.async = true;
/******/ 		script.timeout = 120000;
/******/
/******/ 		if (__webpack_require__.nc) {
/******/ 			script.setAttribute("nonce", __webpack_require__.nc);
/******/ 		}
/******/ 		script.src = __webpack_require__.p + "" + ({}[chunkId]||chunkId) + ".chunk.js";
/******/ 		var timeout = setTimeout(onScriptComplete, 120000);
/******/ 		script.onerror = script.onload = onScriptComplete;
/******/ 		function onScriptComplete() {
/******/ 			// avoid mem leaks in IE.
/******/ 			script.onerror = script.onload = null;
/******/ 			clearTimeout(timeout);
/******/ 			var chunk = installedChunks[chunkId];
/******/ 			if(chunk !== 0) {
/******/ 				if(chunk) {
/******/ 					chunk[1](new Error('Loading chunk ' + chunkId + ' failed.'));
/******/ 				}
/******/ 				installedChunks[chunkId] = undefined;
/******/ 			}
/******/ 		};
/******/ 		head.appendChild(script);
/******/
/******/ 		return promise;
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 46);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_0__;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.12.5
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var nativeHints = ['native code', '[object MutationObserverConstructor]'];

/**
 * Determine if a function is implemented natively (as opposed to a polyfill).
 * @method
 * @memberof Popper.Utils
 * @argument {Function | undefined} fn the function to check
 * @returns {Boolean}
 */
var isNative = function isNative(fn) {
  return nativeHints.some(function (hint) {
    return (fn || '').toString().indexOf(hint) > -1;
  });
};

var isBrowser = typeof window !== 'undefined';
var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
var timeoutDuration = 0;
for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
    timeoutDuration = 1;
    break;
  }
}

function microtaskDebounce(fn) {
  var scheduled = false;
  var i = 0;
  var elem = document.createElement('span');

  // MutationObserver provides a mechanism for scheduling microtasks, which
  // are scheduled *before* the next task. This gives us a way to debounce
  // a function but ensure it's called *before* the next paint.
  var observer = new MutationObserver(function () {
    fn();
    scheduled = false;
  });

  observer.observe(elem, { attributes: true });

  return function () {
    if (!scheduled) {
      scheduled = true;
      elem.setAttribute('x-index', i);
      i = i + 1; // don't use compund (+=) because it doesn't get optimized in V8
    }
  };
}

function taskDebounce(fn) {
  var scheduled = false;
  return function () {
    if (!scheduled) {
      scheduled = true;
      setTimeout(function () {
        scheduled = false;
        fn();
      }, timeoutDuration);
    }
  };
}

// It's common for MutationObserver polyfills to be seen in the wild, however
// these rely on Mutation Events which only occur when an element is connected
// to the DOM. The algorithm used in this module does not use a connected element,
// and so we must ensure that a *native* MutationObserver is available.
var supportsNativeMutationObserver = isBrowser && isNative(window.MutationObserver);

/**
* Create a debounced version of a method, that's asynchronously deferred
* but called in the minimum time possible.
*
* @method
* @memberof Popper.Utils
* @argument {Function} fn
* @returns {Function}
*/
var debounce = supportsNativeMutationObserver ? microtaskDebounce : taskDebounce;

/**
 * Check if the given variable is a function
 * @method
 * @memberof Popper.Utils
 * @argument {Any} functionToCheck - variable to check
 * @returns {Boolean} answer to: is a function?
 */
function isFunction(functionToCheck) {
  var getType = {};
  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
}

/**
 * Get CSS computed property of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Eement} element
 * @argument {String} property
 */
function getStyleComputedProperty(element, property) {
  if (element.nodeType !== 1) {
    return [];
  }
  // NOTE: 1 DOM access here
  var css = window.getComputedStyle(element, null);
  return property ? css[property] : css;
}

/**
 * Returns the parentNode or the host of the element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} parent
 */
function getParentNode(element) {
  if (element.nodeName === 'HTML') {
    return element;
  }
  return element.parentNode || element.host;
}

/**
 * Returns the scrolling parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} scroll parent
 */
function getScrollParent(element) {
  // Return body, `getScroll` will take care to get the correct `scrollTop` from it
  if (!element || ['HTML', 'BODY', '#document'].indexOf(element.nodeName) !== -1) {
    return window.document.body;
  }

  // Firefox want us to check `-x` and `-y` variations as well

  var _getStyleComputedProp = getStyleComputedProperty(element),
      overflow = _getStyleComputedProp.overflow,
      overflowX = _getStyleComputedProp.overflowX,
      overflowY = _getStyleComputedProp.overflowY;

  if (/(auto|scroll)/.test(overflow + overflowY + overflowX)) {
    return element;
  }

  return getScrollParent(getParentNode(element));
}

/**
 * Returns the offset parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} offset parent
 */
function getOffsetParent(element) {
  // NOTE: 1 DOM access here
  var offsetParent = element && element.offsetParent;
  var nodeName = offsetParent && offsetParent.nodeName;

  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
    return window.document.documentElement;
  }

  // .offsetParent will return the closest TD or TABLE in case
  // no offsetParent is present, I hate this job...
  if (['TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
    return getOffsetParent(offsetParent);
  }

  return offsetParent;
}

function isOffsetContainer(element) {
  var nodeName = element.nodeName;

  if (nodeName === 'BODY') {
    return false;
  }
  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
}

/**
 * Finds the root node (document, shadowDOM root) of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} node
 * @returns {Element} root node
 */
function getRoot(node) {
  if (node.parentNode !== null) {
    return getRoot(node.parentNode);
  }

  return node;
}

/**
 * Finds the offset parent common to the two provided nodes
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element1
 * @argument {Element} element2
 * @returns {Element} common offset parent
 */
function findCommonOffsetParent(element1, element2) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
    return window.document.documentElement;
  }

  // Here we make sure to give as "start" the element that comes first in the DOM
  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
  var start = order ? element1 : element2;
  var end = order ? element2 : element1;

  // Get common ancestor container
  var range = document.createRange();
  range.setStart(start, 0);
  range.setEnd(end, 0);
  var commonAncestorContainer = range.commonAncestorContainer;

  // Both nodes are inside #document

  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
    if (isOffsetContainer(commonAncestorContainer)) {
      return commonAncestorContainer;
    }

    return getOffsetParent(commonAncestorContainer);
  }

  // one of the nodes is inside shadowDOM, find which one
  var element1root = getRoot(element1);
  if (element1root.host) {
    return findCommonOffsetParent(element1root.host, element2);
  } else {
    return findCommonOffsetParent(element1, getRoot(element2).host);
  }
}

/**
 * Gets the scroll value of the given element in the given side (top and left)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {String} side `top` or `left`
 * @returns {number} amount of scrolled pixels
 */
function getScroll(element) {
  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';

  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
  var nodeName = element.nodeName;

  if (nodeName === 'BODY' || nodeName === 'HTML') {
    var html = window.document.documentElement;
    var scrollingElement = window.document.scrollingElement || html;
    return scrollingElement[upperSide];
  }

  return element[upperSide];
}

/*
 * Sum or subtract the element scroll values (left and top) from a given rect object
 * @method
 * @memberof Popper.Utils
 * @param {Object} rect - Rect object you want to change
 * @param {HTMLElement} element - The element from the function reads the scroll values
 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
 * @return {Object} rect - The modifier rect object
 */
function includeScroll(rect, element) {
  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var scrollTop = getScroll(element, 'top');
  var scrollLeft = getScroll(element, 'left');
  var modifier = subtract ? -1 : 1;
  rect.top += scrollTop * modifier;
  rect.bottom += scrollTop * modifier;
  rect.left += scrollLeft * modifier;
  rect.right += scrollLeft * modifier;
  return rect;
}

/*
 * Helper to detect borders of a given element
 * @method
 * @memberof Popper.Utils
 * @param {CSSStyleDeclaration} styles
 * Result of `getStyleComputedProperty` on the given element
 * @param {String} axis - `x` or `y`
 * @return {number} borders - The borders size of the given axis
 */

function getBordersSize(styles, axis) {
  var sideA = axis === 'x' ? 'Left' : 'Top';
  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';

  return +styles['border' + sideA + 'Width'].split('px')[0] + +styles['border' + sideB + 'Width'].split('px')[0];
}

/**
 * Tells if you are running Internet Explorer 10
 * @method
 * @memberof Popper.Utils
 * @returns {Boolean} isIE10
 */
var isIE10 = undefined;

var isIE10$1 = function isIE10$1() {
  if (isIE10 === undefined) {
    isIE10 = navigator.appVersion.indexOf('MSIE 10') !== -1;
  }
  return isIE10;
};

function getSize(axis, body, html, computedStyle) {
  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE10$1() ? html['offset' + axis] + computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')] + computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')] : 0);
}

function getWindowSizes() {
  var body = window.document.body;
  var html = window.document.documentElement;
  var computedStyle = isIE10$1() && window.getComputedStyle(html);

  return {
    height: getSize('Height', body, html, computedStyle),
    width: getSize('Width', body, html, computedStyle)
  };
}

var classCallCheck = function classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var defineProperty = function defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

/**
 * Given element offsets, generate an output similar to getBoundingClientRect
 * @method
 * @memberof Popper.Utils
 * @argument {Object} offsets
 * @returns {Object} ClientRect like output
 */
function getClientRect(offsets) {
  return _extends({}, offsets, {
    right: offsets.left + offsets.width,
    bottom: offsets.top + offsets.height
  });
}

/**
 * Get bounding client rect of given element
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} element
 * @return {Object} client rect
 */
function getBoundingClientRect(element) {
  var rect = {};

  // IE10 10 FIX: Please, don't ask, the element isn't
  // considered in DOM in some circumstances...
  // This isn't reproducible in IE10 compatibility mode of IE11
  if (isIE10$1()) {
    try {
      rect = element.getBoundingClientRect();
      var scrollTop = getScroll(element, 'top');
      var scrollLeft = getScroll(element, 'left');
      rect.top += scrollTop;
      rect.left += scrollLeft;
      rect.bottom += scrollTop;
      rect.right += scrollLeft;
    } catch (err) {}
  } else {
    rect = element.getBoundingClientRect();
  }

  var result = {
    left: rect.left,
    top: rect.top,
    width: rect.right - rect.left,
    height: rect.bottom - rect.top
  };

  // subtract scrollbar size from sizes
  var sizes = element.nodeName === 'HTML' ? getWindowSizes() : {};
  var width = sizes.width || element.clientWidth || result.right - result.left;
  var height = sizes.height || element.clientHeight || result.bottom - result.top;

  var horizScrollbar = element.offsetWidth - width;
  var vertScrollbar = element.offsetHeight - height;

  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
  // we make this check conditional for performance reasons
  if (horizScrollbar || vertScrollbar) {
    var styles = getStyleComputedProperty(element);
    horizScrollbar -= getBordersSize(styles, 'x');
    vertScrollbar -= getBordersSize(styles, 'y');

    result.width -= horizScrollbar;
    result.height -= vertScrollbar;
  }

  return getClientRect(result);
}

function getOffsetRectRelativeToArbitraryNode(children, parent) {
  var isIE10 = isIE10$1();
  var isHTML = parent.nodeName === 'HTML';
  var childrenRect = getBoundingClientRect(children);
  var parentRect = getBoundingClientRect(parent);
  var scrollParent = getScrollParent(children);

  var styles = getStyleComputedProperty(parent);
  var borderTopWidth = +styles.borderTopWidth.split('px')[0];
  var borderLeftWidth = +styles.borderLeftWidth.split('px')[0];

  var offsets = getClientRect({
    top: childrenRect.top - parentRect.top - borderTopWidth,
    left: childrenRect.left - parentRect.left - borderLeftWidth,
    width: childrenRect.width,
    height: childrenRect.height
  });
  offsets.marginTop = 0;
  offsets.marginLeft = 0;

  // Subtract margins of documentElement in case it's being used as parent
  // we do this only on HTML because it's the only element that behaves
  // differently when margins are applied to it. The margins are included in
  // the box of the documentElement, in the other cases not.
  if (!isIE10 && isHTML) {
    var marginTop = +styles.marginTop.split('px')[0];
    var marginLeft = +styles.marginLeft.split('px')[0];

    offsets.top -= borderTopWidth - marginTop;
    offsets.bottom -= borderTopWidth - marginTop;
    offsets.left -= borderLeftWidth - marginLeft;
    offsets.right -= borderLeftWidth - marginLeft;

    // Attach marginTop and marginLeft because in some circumstances we may need them
    offsets.marginTop = marginTop;
    offsets.marginLeft = marginLeft;
  }

  if (isIE10 ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
    offsets = includeScroll(offsets, parent);
  }

  return offsets;
}

function getViewportOffsetRectRelativeToArtbitraryNode(element) {
  var html = window.document.documentElement;
  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
  var width = Math.max(html.clientWidth, window.innerWidth || 0);
  var height = Math.max(html.clientHeight, window.innerHeight || 0);

  var scrollTop = getScroll(html);
  var scrollLeft = getScroll(html, 'left');

  var offset = {
    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
    width: width,
    height: height
  };

  return getClientRect(offset);
}

/**
 * Check if the given element is fixed or is inside a fixed parent
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {Element} customContainer
 * @returns {Boolean} answer to "isFixed?"
 */
function isFixed(element) {
  var nodeName = element.nodeName;
  if (nodeName === 'BODY' || nodeName === 'HTML') {
    return false;
  }
  if (getStyleComputedProperty(element, 'position') === 'fixed') {
    return true;
  }
  return isFixed(getParentNode(element));
}

/**
 * Computed the boundaries limits and return them
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} popper
 * @param {HTMLElement} reference
 * @param {number} padding
 * @param {HTMLElement} boundariesElement - Element used to define the boundaries
 * @returns {Object} Coordinates of the boundaries
 */
function getBoundaries(popper, reference, padding, boundariesElement) {
  // NOTE: 1 DOM access here
  var boundaries = { top: 0, left: 0 };
  var offsetParent = findCommonOffsetParent(popper, reference);

  // Handle viewport case
  if (boundariesElement === 'viewport') {
    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent);
  } else {
    // Handle other cases based on DOM element used as boundaries
    var boundariesNode = void 0;
    if (boundariesElement === 'scrollParent') {
      boundariesNode = getScrollParent(getParentNode(popper));
      if (boundariesNode.nodeName === 'BODY') {
        boundariesNode = window.document.documentElement;
      }
    } else if (boundariesElement === 'window') {
      boundariesNode = window.document.documentElement;
    } else {
      boundariesNode = boundariesElement;
    }

    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent);

    // In case of HTML, we need a different computation
    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
      var _getWindowSizes = getWindowSizes(),
          height = _getWindowSizes.height,
          width = _getWindowSizes.width;

      boundaries.top += offsets.top - offsets.marginTop;
      boundaries.bottom = height + offsets.top;
      boundaries.left += offsets.left - offsets.marginLeft;
      boundaries.right = width + offsets.left;
    } else {
      // for all the other DOM elements, this one is good
      boundaries = offsets;
    }
  }

  // Add paddings
  boundaries.left += padding;
  boundaries.top += padding;
  boundaries.right -= padding;
  boundaries.bottom -= padding;

  return boundaries;
}

function getArea(_ref) {
  var width = _ref.width,
      height = _ref.height;

  return width * height;
}

/**
 * Utility used to transform the `auto` placement to the placement with more
 * available space.
 * @method
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

  if (placement.indexOf('auto') === -1) {
    return placement;
  }

  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);

  var rects = {
    top: {
      width: boundaries.width,
      height: refRect.top - boundaries.top
    },
    right: {
      width: boundaries.right - refRect.right,
      height: boundaries.height
    },
    bottom: {
      width: boundaries.width,
      height: boundaries.bottom - refRect.bottom
    },
    left: {
      width: refRect.left - boundaries.left,
      height: boundaries.height
    }
  };

  var sortedAreas = Object.keys(rects).map(function (key) {
    return _extends({
      key: key
    }, rects[key], {
      area: getArea(rects[key])
    });
  }).sort(function (a, b) {
    return b.area - a.area;
  });

  var filteredAreas = sortedAreas.filter(function (_ref2) {
    var width = _ref2.width,
        height = _ref2.height;
    return width >= popper.clientWidth && height >= popper.clientHeight;
  });

  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;

  var variation = placement.split('-')[1];

  return computedPlacement + (variation ? '-' + variation : '');
}

/**
 * Get offsets to the reference element
 * @method
 * @memberof Popper.Utils
 * @param {Object} state
 * @param {Element} popper - the popper element
 * @param {Element} reference - the reference element (the popper will be relative to this)
 * @returns {Object} An object containing the offsets which will be applied to the popper
 */
function getReferenceOffsets(state, popper, reference) {
  var commonOffsetParent = findCommonOffsetParent(popper, reference);
  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent);
}

/**
 * Get the outer sizes of the given element (offset size + margins)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Object} object containing width and height properties
 */
function getOuterSizes(element) {
  var styles = window.getComputedStyle(element);
  var x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);
  var y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);
  var result = {
    width: element.offsetWidth + y,
    height: element.offsetHeight + x
  };
  return result;
}

/**
 * Get the opposite placement of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement
 * @returns {String} flipped placement
 */
function getOppositePlacement(placement) {
  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash[matched];
  });
}

/**
 * Get offsets to the popper
 * @method
 * @memberof Popper.Utils
 * @param {Object} position - CSS position the Popper will get applied
 * @param {HTMLElement} popper - the popper element
 * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
 * @param {String} placement - one of the valid placement options
 * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
 */
function getPopperOffsets(popper, referenceOffsets, placement) {
  placement = placement.split('-')[0];

  // Get popper node sizes
  var popperRect = getOuterSizes(popper);

  // Add position, width and height to our offsets object
  var popperOffsets = {
    width: popperRect.width,
    height: popperRect.height
  };

  // depending by the popper placement we have to compute its offsets slightly differently
  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
  var mainSide = isHoriz ? 'top' : 'left';
  var secondarySide = isHoriz ? 'left' : 'top';
  var measurement = isHoriz ? 'height' : 'width';
  var secondaryMeasurement = !isHoriz ? 'height' : 'width';

  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
  if (placement === secondarySide) {
    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
  } else {
    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
  }

  return popperOffsets;
}

/**
 * Mimics the `find` method of Array
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function find(arr, check) {
  // use native find if supported
  if (Array.prototype.find) {
    return arr.find(check);
  }

  // use `filter` to obtain the same behavior of `find`
  return arr.filter(check)[0];
}

/**
 * Return the index of the matching object
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function findIndex(arr, prop, value) {
  // use native findIndex if supported
  if (Array.prototype.findIndex) {
    return arr.findIndex(function (cur) {
      return cur[prop] === value;
    });
  }

  // use `find` + `indexOf` if `findIndex` isn't supported
  var match = find(arr, function (obj) {
    return obj[prop] === value;
  });
  return arr.indexOf(match);
}

/**
 * Loop trough the list of modifiers and run them in order,
 * each of them will then edit the data object.
 * @method
 * @memberof Popper.Utils
 * @param {dataObject} data
 * @param {Array} modifiers
 * @param {String} ends - Optional modifier name used as stopper
 * @returns {dataObject}
 */
function runModifiers(modifiers, data, ends) {
  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));

  modifiersToRun.forEach(function (modifier) {
    if (modifier['function']) {
      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
    }
    var fn = modifier['function'] || modifier.fn;
    if (modifier.enabled && isFunction(fn)) {
      // Add properties to offsets to make them a complete clientRect object
      // we do this before each modifier to make sure the previous one doesn't
      // mess with these values
      data.offsets.popper = getClientRect(data.offsets.popper);
      data.offsets.reference = getClientRect(data.offsets.reference);

      data = fn(data, modifier);
    }
  });

  return data;
}

/**
 * Updates the position of the popper, computing the new offsets and applying
 * the new style.<br />
 * Prefer `scheduleUpdate` over `update` because of performance reasons.
 * @method
 * @memberof Popper
 */
function update() {
  // if popper is destroyed, don't perform any further update
  if (this.state.isDestroyed) {
    return;
  }

  var data = {
    instance: this,
    styles: {},
    arrowStyles: {},
    attributes: {},
    flipped: false,
    offsets: {}
  };

  // compute reference element offsets
  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);

  // store the computed placement inside `originalPlacement`
  data.originalPlacement = data.placement;

  // compute the popper offsets
  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);
  data.offsets.popper.position = 'absolute';

  // run the modifiers
  data = runModifiers(this.modifiers, data);

  // the first `update` will call `onCreate` callback
  // the other ones will call `onUpdate` callback
  if (!this.state.isCreated) {
    this.state.isCreated = true;
    this.options.onCreate(data);
  } else {
    this.options.onUpdate(data);
  }
}

/**
 * Helper used to know if the given modifier is enabled.
 * @method
 * @memberof Popper.Utils
 * @returns {Boolean}
 */
function isModifierEnabled(modifiers, modifierName) {
  return modifiers.some(function (_ref) {
    var name = _ref.name,
        enabled = _ref.enabled;
    return enabled && name === modifierName;
  });
}

/**
 * Get the prefixed supported property name
 * @method
 * @memberof Popper.Utils
 * @argument {String} property (camelCase)
 * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
 */
function getSupportedPropertyName(property) {
  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

  for (var i = 0; i < prefixes.length - 1; i++) {
    var prefix = prefixes[i];
    var toCheck = prefix ? '' + prefix + upperProp : property;
    if (typeof window.document.body.style[toCheck] !== 'undefined') {
      return toCheck;
    }
  }
  return null;
}

/**
 * Destroy the popper
 * @method
 * @memberof Popper
 */
function destroy() {
  this.state.isDestroyed = true;

  // touch DOM only if `applyStyle` modifier is enabled
  if (isModifierEnabled(this.modifiers, 'applyStyle')) {
    this.popper.removeAttribute('x-placement');
    this.popper.style.left = '';
    this.popper.style.position = '';
    this.popper.style.top = '';
    this.popper.style[getSupportedPropertyName('transform')] = '';
  }

  this.disableEventListeners();

  // remove the popper if user explicity asked for the deletion on destroy
  // do not use `remove` because IE11 doesn't support it
  if (this.options.removeOnDestroy) {
    this.popper.parentNode.removeChild(this.popper);
  }
  return this;
}

function attachToScrollParents(scrollParent, event, callback, scrollParents) {
  var isBody = scrollParent.nodeName === 'BODY';
  var target = isBody ? window : scrollParent;
  target.addEventListener(event, callback, { passive: true });

  if (!isBody) {
    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
  }
  scrollParents.push(target);
}

/**
 * Setup needed event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function setupEventListeners(reference, options, state, updateBound) {
  // Resize event listener on window
  state.updateBound = updateBound;
  window.addEventListener('resize', state.updateBound, { passive: true });

  // Scroll event listener on scroll parents
  var scrollElement = getScrollParent(reference);
  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
  state.scrollElement = scrollElement;
  state.eventsEnabled = true;

  return state;
}

/**
 * It will add resize/scroll events and start recalculating
 * position of the popper element when they are triggered.
 * @method
 * @memberof Popper
 */
function enableEventListeners() {
  if (!this.state.eventsEnabled) {
    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
  }
}

/**
 * Remove event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function removeEventListeners(reference, state) {
  // Remove resize event listener on window
  window.removeEventListener('resize', state.updateBound);

  // Remove scroll event listener on scroll parents
  state.scrollParents.forEach(function (target) {
    target.removeEventListener('scroll', state.updateBound);
  });

  // Reset state
  state.updateBound = null;
  state.scrollParents = [];
  state.scrollElement = null;
  state.eventsEnabled = false;
  return state;
}

/**
 * It will remove resize/scroll events and won't recalculate popper position
 * when they are triggered. It also won't trigger onUpdate callback anymore,
 * unless you call `update` method manually.
 * @method
 * @memberof Popper
 */
function disableEventListeners() {
  if (this.state.eventsEnabled) {
    window.cancelAnimationFrame(this.scheduleUpdate);
    this.state = removeEventListeners(this.reference, this.state);
  }
}

/**
 * Tells if a given input is a number
 * @method
 * @memberof Popper.Utils
 * @param {*} input to check
 * @return {Boolean}
 */
function isNumeric(n) {
  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
}

/**
 * Set the style to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the style to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setStyles(element, styles) {
  Object.keys(styles).forEach(function (prop) {
    var unit = '';
    // add unit if the value is numeric and is one of the following
    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
      unit = 'px';
    }
    element.style[prop] = styles[prop] + unit;
  });
}

/**
 * Set the attributes to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the attributes to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setAttributes(element, attributes) {
  Object.keys(attributes).forEach(function (prop) {
    var value = attributes[prop];
    if (value !== false) {
      element.setAttribute(prop, attributes[prop]);
    } else {
      element.removeAttribute(prop);
    }
  });
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} data.styles - List of style properties - values to apply to popper element
 * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The same data object
 */
function applyStyle(data) {
  // any property present in `data.styles` will be applied to the popper,
  // in this way we can make the 3rd party modifiers add custom styles to it
  // Be aware, modifiers could override the properties defined in the previous
  // lines of this modifier!
  setStyles(data.instance.popper, data.styles);

  // any property present in `data.attributes` will be applied to the popper,
  // they will be set as HTML attributes of the element
  setAttributes(data.instance.popper, data.attributes);

  // if arrowElement is defined and arrowStyles has some properties
  if (data.arrowElement && Object.keys(data.arrowStyles).length) {
    setStyles(data.arrowElement, data.arrowStyles);
  }

  return data;
}

/**
 * Set the x-placement attribute before everything else because it could be used
 * to add margins to the popper margins needs to be calculated to get the
 * correct popper offsets.
 * @method
 * @memberof Popper.modifiers
 * @param {HTMLElement} reference - The reference element used to position the popper
 * @param {HTMLElement} popper - The HTML element used as popper.
 * @param {Object} options - Popper.js options
 */
function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
  // compute reference element offsets
  var referenceOffsets = getReferenceOffsets(state, popper, reference);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);

  popper.setAttribute('x-placement', placement);

  // Apply `position` to popper before anything else because
  // without the position applied we can't guarantee correct computations
  setStyles(popper, { position: 'absolute' });

  return options;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeStyle(data, options) {
  var x = options.x,
      y = options.y;
  var popper = data.offsets.popper;

  // Remove this legacy support in Popper.js v2

  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'applyStyle';
  }).gpuAcceleration;
  if (legacyGpuAccelerationOption !== undefined) {
    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
  }
  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;

  var offsetParent = getOffsetParent(data.instance.popper);
  var offsetParentRect = getBoundingClientRect(offsetParent);

  // Styles
  var styles = {
    position: popper.position
  };

  // floor sides to avoid blurry text
  var offsets = {
    left: Math.floor(popper.left),
    top: Math.floor(popper.top),
    bottom: Math.floor(popper.bottom),
    right: Math.floor(popper.right)
  };

  var sideA = x === 'bottom' ? 'top' : 'bottom';
  var sideB = y === 'right' ? 'left' : 'right';

  // if gpuAcceleration is set to `true` and transform is supported,
  //  we use `translate3d` to apply the position to the popper we
  // automatically use the supported prefixed version if needed
  var prefixedProperty = getSupportedPropertyName('transform');

  // now, let's make a step back and look at this code closely (wtf?)
  // If the content of the popper grows once it's been positioned, it
  // may happen that the popper gets misplaced because of the new content
  // overflowing its reference element
  // To avoid this problem, we provide two options (x and y), which allow
  // the consumer to define the offset origin.
  // If we position a popper on top of a reference element, we can set
  // `x` to `top` to make the popper grow towards its top instead of
  // its bottom.
  var left = void 0,
      top = void 0;
  if (sideA === 'bottom') {
    top = -offsetParentRect.height + offsets.bottom;
  } else {
    top = offsets.top;
  }
  if (sideB === 'right') {
    left = -offsetParentRect.width + offsets.right;
  } else {
    left = offsets.left;
  }
  if (gpuAcceleration && prefixedProperty) {
    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
    styles[sideA] = 0;
    styles[sideB] = 0;
    styles.willChange = 'transform';
  } else {
    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
    var invertTop = sideA === 'bottom' ? -1 : 1;
    var invertLeft = sideB === 'right' ? -1 : 1;
    styles[sideA] = top * invertTop;
    styles[sideB] = left * invertLeft;
    styles.willChange = sideA + ', ' + sideB;
  }

  // Attributes
  var attributes = {
    'x-placement': data.placement
  };

  // Update `data` attributes, styles and arrowStyles
  data.attributes = _extends({}, attributes, data.attributes);
  data.styles = _extends({}, styles, data.styles);
  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);

  return data;
}

/**
 * Helper used to know if the given modifier depends from another one.<br />
 * It checks if the needed modifier is listed and enabled.
 * @method
 * @memberof Popper.Utils
 * @param {Array} modifiers - list of modifiers
 * @param {String} requestingName - name of requesting modifier
 * @param {String} requestedName - name of requested modifier
 * @returns {Boolean}
 */
function isModifierRequired(modifiers, requestingName, requestedName) {
  var requesting = find(modifiers, function (_ref) {
    var name = _ref.name;
    return name === requestingName;
  });

  var isRequired = !!requesting && modifiers.some(function (modifier) {
    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
  });

  if (!isRequired) {
    var _requesting = '`' + requestingName + '`';
    var requested = '`' + requestedName + '`';
    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
  }
  return isRequired;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function arrow(data, options) {
  // arrow depends on keepTogether in order to work
  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
    return data;
  }

  var arrowElement = options.element;

  // if arrowElement is a string, suppose it's a CSS selector
  if (typeof arrowElement === 'string') {
    arrowElement = data.instance.popper.querySelector(arrowElement);

    // if arrowElement is not found, don't run the modifier
    if (!arrowElement) {
      return data;
    }
  } else {
    // if the arrowElement isn't a query selector we must check that the
    // provided DOM node is child of its popper node
    if (!data.instance.popper.contains(arrowElement)) {
      console.warn('WARNING: `arrow.element` must be child of its popper element!');
      return data;
    }
  }

  var placement = data.placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isVertical = ['left', 'right'].indexOf(placement) !== -1;

  var len = isVertical ? 'height' : 'width';
  var sideCapitalized = isVertical ? 'Top' : 'Left';
  var side = sideCapitalized.toLowerCase();
  var altSide = isVertical ? 'left' : 'top';
  var opSide = isVertical ? 'bottom' : 'right';
  var arrowElementSize = getOuterSizes(arrowElement)[len];

  //
  // extends keepTogether behavior making sure the popper and its
  // reference have enough pixels in conjuction
  //

  // top/left side
  if (reference[opSide] - arrowElementSize < popper[side]) {
    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
  }
  // bottom/right side
  if (reference[side] + arrowElementSize > popper[opSide]) {
    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
  }

  // compute center of the popper
  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;

  // Compute the sideValue using the updated popper offsets
  // take popper margin in account because we don't have this info available
  var popperMarginSide = getStyleComputedProperty(data.instance.popper, 'margin' + sideCapitalized).replace('px', '');
  var sideValue = center - getClientRect(data.offsets.popper)[side] - popperMarginSide;

  // prevent arrowElement from being placed not contiguously to its popper
  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);

  data.arrowElement = arrowElement;
  data.offsets.arrow = {};
  data.offsets.arrow[side] = Math.round(sideValue);
  data.offsets.arrow[altSide] = ''; // make sure to unset any eventual altSide value from the DOM node

  return data;
}

/**
 * Get the opposite placement variation of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement variation
 * @returns {String} flipped placement variation
 */
function getOppositeVariation(variation) {
  if (variation === 'end') {
    return 'start';
  } else if (variation === 'start') {
    return 'end';
  }
  return variation;
}

/**
 * List of accepted placements to use as values of the `placement` option.<br />
 * Valid placements are:
 * - `auto`
 * - `top`
 * - `right`
 * - `bottom`
 * - `left`
 *
 * Each placement can have a variation from this list:
 * - `-start`
 * - `-end`
 *
 * Variations are interpreted easily if you think of them as the left to right
 * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
 * is right.<br />
 * Vertically (`left` and `right`), `start` is top and `end` is bottom.
 *
 * Some valid examples are:
 * - `top-end` (on top of reference, right aligned)
 * - `right-start` (on right of reference, top aligned)
 * - `bottom` (on bottom, centered)
 * - `auto-right` (on the side with more space available, alignment depends by placement)
 *
 * @static
 * @type {Array}
 * @enum {String}
 * @readonly
 * @method placements
 * @memberof Popper
 */
var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];

// Get rid of `auto` `auto-start` and `auto-end`
var validPlacements = placements.slice(3);

/**
 * Given an initial placement, returns all the subsequent placements
 * clockwise (or counter-clockwise).
 *
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement - A valid placement (it accepts variations)
 * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
 * @returns {Array} placements including their variations
 */
function clockwise(placement) {
  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var index = validPlacements.indexOf(placement);
  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
  return counter ? arr.reverse() : arr;
}

var BEHAVIORS = {
  FLIP: 'flip',
  CLOCKWISE: 'clockwise',
  COUNTERCLOCKWISE: 'counterclockwise'
};

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function flip(data, options) {
  // if `inner` modifier is enabled, we can't use the `flip` modifier
  if (isModifierEnabled(data.instance.modifiers, 'inner')) {
    return data;
  }

  if (data.flipped && data.placement === data.originalPlacement) {
    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
    return data;
  }

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement);

  var placement = data.placement.split('-')[0];
  var placementOpposite = getOppositePlacement(placement);
  var variation = data.placement.split('-')[1] || '';

  var flipOrder = [];

  switch (options.behavior) {
    case BEHAVIORS.FLIP:
      flipOrder = [placement, placementOpposite];
      break;
    case BEHAVIORS.CLOCKWISE:
      flipOrder = clockwise(placement);
      break;
    case BEHAVIORS.COUNTERCLOCKWISE:
      flipOrder = clockwise(placement, true);
      break;
    default:
      flipOrder = options.behavior;
  }

  flipOrder.forEach(function (step, index) {
    if (placement !== step || flipOrder.length === index + 1) {
      return data;
    }

    placement = data.placement.split('-')[0];
    placementOpposite = getOppositePlacement(placement);

    var popperOffsets = data.offsets.popper;
    var refOffsets = data.offsets.reference;

    // using floor because the reference offsets may contain decimals we are not going to consider here
    var floor = Math.floor;
    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);

    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);

    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;

    // flip the variation if required
    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
    var flippedVariation = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);

    if (overlapsRef || overflowsBoundaries || flippedVariation) {
      // this boolean to detect any flip loop
      data.flipped = true;

      if (overlapsRef || overflowsBoundaries) {
        placement = flipOrder[index + 1];
      }

      if (flippedVariation) {
        variation = getOppositeVariation(variation);
      }

      data.placement = placement + (variation ? '-' + variation : '');

      // this object contains `position`, we want to preserve it along with
      // any additional property we may add in the future
      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));

      data = runModifiers(data.instance.modifiers, data, 'flip');
    }
  });
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function keepTogether(data) {
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var placement = data.placement.split('-')[0];
  var floor = Math.floor;
  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
  var side = isVertical ? 'right' : 'bottom';
  var opSide = isVertical ? 'left' : 'top';
  var measurement = isVertical ? 'width' : 'height';

  if (popper[side] < floor(reference[opSide])) {
    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
  }
  if (popper[opSide] > floor(reference[side])) {
    data.offsets.popper[opSide] = floor(reference[side]);
  }

  return data;
}

/**
 * Converts a string containing value + unit into a px value number
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} str - Value + unit string
 * @argument {String} measurement - `height` or `width`
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @returns {Number|String}
 * Value in pixels, or original string if no values were extracted
 */
function toValue(str, measurement, popperOffsets, referenceOffsets) {
  // separate value from unit
  var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
  var value = +split[1];
  var unit = split[2];

  // If it's not a number it's an operator, I guess
  if (!value) {
    return str;
  }

  if (unit.indexOf('%') === 0) {
    var element = void 0;
    switch (unit) {
      case '%p':
        element = popperOffsets;
        break;
      case '%':
      case '%r':
      default:
        element = referenceOffsets;
    }

    var rect = getClientRect(element);
    return rect[measurement] / 100 * value;
  } else if (unit === 'vh' || unit === 'vw') {
    // if is a vh or vw, we calculate the size based on the viewport
    var size = void 0;
    if (unit === 'vh') {
      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
    } else {
      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    }
    return size / 100 * value;
  } else {
    // if is an explicit pixel unit, we get rid of the unit and keep the value
    // if is an implicit unit, it's px, and we return just the value
    return value;
  }
}

/**
 * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} offset
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @argument {String} basePlacement
 * @returns {Array} a two cells array with x and y offsets in numbers
 */
function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
  var offsets = [0, 0];

  // Use height if placement is left or right and index is 0 otherwise use width
  // in this way the first offset will use an axis and the second one
  // will use the other one
  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;

  // Split the offset string to obtain a list of values and operands
  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
  var fragments = offset.split(/(\+|\-)/).map(function (frag) {
    return frag.trim();
  });

  // Detect if the offset string contains a pair of values or a single one
  // they could be separated by comma or space
  var divider = fragments.indexOf(find(fragments, function (frag) {
    return frag.search(/,|\s/) !== -1;
  }));

  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
  }

  // If divider is found, we divide the list of values and operands to divide
  // them by ofset X and Y.
  var splitRegex = /\s*,\s*|\s+/;
  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];

  // Convert the values with units to absolute pixels to allow our computations
  ops = ops.map(function (op, index) {
    // Most of the units rely on the orientation of the popper
    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
    var mergeWithPrevious = false;
    return op
    // This aggregates any `+` or `-` sign that aren't considered operators
    // e.g.: 10 + +5 => [10, +, +5]
    .reduce(function (a, b) {
      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
        a[a.length - 1] = b;
        mergeWithPrevious = true;
        return a;
      } else if (mergeWithPrevious) {
        a[a.length - 1] += b;
        mergeWithPrevious = false;
        return a;
      } else {
        return a.concat(b);
      }
    }, [])
    // Here we convert the string values into number values (in px)
    .map(function (str) {
      return toValue(str, measurement, popperOffsets, referenceOffsets);
    });
  });

  // Loop trough the offsets arrays and execute the operations
  ops.forEach(function (op, index) {
    op.forEach(function (frag, index2) {
      if (isNumeric(frag)) {
        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
      }
    });
  });
  return offsets;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @argument {Number|String} options.offset=0
 * The offset value as described in the modifier description
 * @returns {Object} The data object, properly modified
 */
function offset(data, _ref) {
  var offset = _ref.offset;
  var placement = data.placement,
      _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var basePlacement = placement.split('-')[0];

  var offsets = void 0;
  if (isNumeric(+offset)) {
    offsets = [+offset, 0];
  } else {
    offsets = parseOffset(offset, popper, reference, basePlacement);
  }

  if (basePlacement === 'left') {
    popper.top += offsets[0];
    popper.left -= offsets[1];
  } else if (basePlacement === 'right') {
    popper.top += offsets[0];
    popper.left += offsets[1];
  } else if (basePlacement === 'top') {
    popper.left += offsets[0];
    popper.top -= offsets[1];
  } else if (basePlacement === 'bottom') {
    popper.left += offsets[0];
    popper.top += offsets[1];
  }

  data.popper = popper;
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function preventOverflow(data, options) {
  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);

  // If offsetParent is the reference element, we really want to
  // go one step up and use the next offsetParent as reference to
  // avoid to make this modifier completely useless and look like broken
  if (data.instance.reference === boundariesElement) {
    boundariesElement = getOffsetParent(boundariesElement);
  }

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement);
  options.boundaries = boundaries;

  var order = options.priority;
  var popper = data.offsets.popper;

  var check = {
    primary: function primary(placement) {
      var value = popper[placement];
      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
        value = Math.max(popper[placement], boundaries[placement]);
      }
      return defineProperty({}, placement, value);
    },
    secondary: function secondary(placement) {
      var mainSide = placement === 'right' ? 'left' : 'top';
      var value = popper[mainSide];
      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
      }
      return defineProperty({}, mainSide, value);
    }
  };

  order.forEach(function (placement) {
    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
    popper = _extends({}, popper, check[side](placement));
  });

  data.offsets.popper = popper;

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function shift(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var shiftvariation = placement.split('-')[1];

  // if shift shiftvariation is specified, run the modifier
  if (shiftvariation) {
    var _data$offsets = data.offsets,
        reference = _data$offsets.reference,
        popper = _data$offsets.popper;

    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
    var side = isVertical ? 'left' : 'top';
    var measurement = isVertical ? 'width' : 'height';

    var shiftOffsets = {
      start: defineProperty({}, side, reference[side]),
      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
    };

    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function hide(data) {
  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
    return data;
  }

  var refRect = data.offsets.reference;
  var bound = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'preventOverflow';
  }).boundaries;

  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === true) {
      return data;
    }

    data.hide = true;
    data.attributes['x-out-of-boundaries'] = '';
  } else {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === false) {
      return data;
    }

    data.hide = false;
    data.attributes['x-out-of-boundaries'] = false;
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function inner(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;

  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;

  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);

  data.placement = getOppositePlacement(placement);
  data.offsets.popper = getClientRect(popper);

  return data;
}

/**
 * Modifier function, each modifier can have a function of this type assigned
 * to its `fn` property.<br />
 * These functions will be called on each update, this means that you must
 * make sure they are performant enough to avoid performance bottlenecks.
 *
 * @function ModifierFn
 * @argument {dataObject} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {dataObject} The data object, properly modified
 */

/**
 * Modifiers are plugins used to alter the behavior of your poppers.<br />
 * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
 * needed by the library.
 *
 * Usually you don't want to override the `order`, `fn` and `onLoad` props.
 * All the other properties are configurations that could be tweaked.
 * @namespace modifiers
 */
var modifiers = {
  /**
   * Modifier used to shift the popper on the start or end of its reference
   * element.<br />
   * It will read the variation of the `placement` property.<br />
   * It can be one either `-end` or `-start`.
   * @memberof modifiers
   * @inner
   */
  shift: {
    /** @prop {number} order=100 - Index used to define the order of execution */
    order: 100,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: shift
  },

  /**
   * The `offset` modifier can shift your popper on both its axis.
   *
   * It accepts the following units:
   * - `px` or unitless, interpreted as pixels
   * - `%` or `%r`, percentage relative to the length of the reference element
   * - `%p`, percentage relative to the length of the popper element
   * - `vw`, CSS viewport width unit
   * - `vh`, CSS viewport height unit
   *
   * For length is intended the main axis relative to the placement of the popper.<br />
   * This means that if the placement is `top` or `bottom`, the length will be the
   * `width`. In case of `left` or `right`, it will be the height.
   *
   * You can provide a single value (as `Number` or `String`), or a pair of values
   * as `String` divided by a comma or one (or more) white spaces.<br />
   * The latter is a deprecated method because it leads to confusion and will be
   * removed in v2.<br />
   * Additionally, it accepts additions and subtractions between different units.
   * Note that multiplications and divisions aren't supported.
   *
   * Valid examples are:
   * ```
   * 10
   * '10%'
   * '10, 10'
   * '10%, 10'
   * '10 + 10%'
   * '10 - 5vh + 3%'
   * '-10px + 5vh, 5px - 6%'
   * ```
   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
   * > More on this [reading this issue](https://github.com/FezVrasta/popper.js/issues/373)
   *
   * @memberof modifiers
   * @inner
   */
  offset: {
    /** @prop {number} order=200 - Index used to define the order of execution */
    order: 200,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: offset,
    /** @prop {Number|String} offset=0
     * The offset value as described in the modifier description
     */
    offset: 0
  },

  /**
   * Modifier used to prevent the popper from being positioned outside the boundary.
   *
   * An scenario exists where the reference itself is not within the boundaries.<br />
   * We can say it has "escaped the boundaries" — or just "escaped".<br />
   * In this case we need to decide whether the popper should either:
   *
   * - detach from the reference and remain "trapped" in the boundaries, or
   * - if it should ignore the boundary and "escape with its reference"
   *
   * When `escapeWithReference` is set to`true` and reference is completely
   * outside its boundaries, the popper will overflow (or completely leave)
   * the boundaries in order to remain attached to the edge of the reference.
   *
   * @memberof modifiers
   * @inner
   */
  preventOverflow: {
    /** @prop {number} order=300 - Index used to define the order of execution */
    order: 300,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: preventOverflow,
    /**
     * @prop {Array} [priority=['left','right','top','bottom']]
     * Popper will try to prevent overflow following these priorities by default,
     * then, it could overflow on the left and on top of the `boundariesElement`
     */
    priority: ['left', 'right', 'top', 'bottom'],
    /**
     * @prop {number} padding=5
     * Amount of pixel used to define a minimum distance between the boundaries
     * and the popper this makes sure the popper has always a little padding
     * between the edges of its container
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='scrollParent'
     * Boundaries used by the modifier, can be `scrollParent`, `window`,
     * `viewport` or any DOM element.
     */
    boundariesElement: 'scrollParent'
  },

  /**
   * Modifier used to make sure the reference and its popper stay near eachothers
   * without leaving any gap between the two. Expecially useful when the arrow is
   * enabled and you want to assure it to point to its reference element.
   * It cares only about the first axis, you can still have poppers with margin
   * between the popper and its reference element.
   * @memberof modifiers
   * @inner
   */
  keepTogether: {
    /** @prop {number} order=400 - Index used to define the order of execution */
    order: 400,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: keepTogether
  },

  /**
   * This modifier is used to move the `arrowElement` of the popper to make
   * sure it is positioned between the reference element and its popper element.
   * It will read the outer size of the `arrowElement` node to detect how many
   * pixels of conjuction are needed.
   *
   * It has no effect if no `arrowElement` is provided.
   * @memberof modifiers
   * @inner
   */
  arrow: {
    /** @prop {number} order=500 - Index used to define the order of execution */
    order: 500,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: arrow,
    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
    element: '[x-arrow]'
  },

  /**
   * Modifier used to flip the popper's placement when it starts to overlap its
   * reference element.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   *
   * **NOTE:** this modifier will interrupt the current update cycle and will
   * restart it if it detects the need to flip the placement.
   * @memberof modifiers
   * @inner
   */
  flip: {
    /** @prop {number} order=600 - Index used to define the order of execution */
    order: 600,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: flip,
    /**
     * @prop {String|Array} behavior='flip'
     * The behavior used to change the popper's placement. It can be one of
     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
     * placements (with optional variations).
     */
    behavior: 'flip',
    /**
     * @prop {number} padding=5
     * The popper will flip if it hits the edges of the `boundariesElement`
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='viewport'
     * The element which will define the boundaries of the popper position,
     * the popper will never be placed outside of the defined boundaries
     * (except if keepTogether is enabled)
     */
    boundariesElement: 'viewport'
  },

  /**
   * Modifier used to make the popper flow toward the inner of the reference element.
   * By default, when this modifier is disabled, the popper will be placed outside
   * the reference element.
   * @memberof modifiers
   * @inner
   */
  inner: {
    /** @prop {number} order=700 - Index used to define the order of execution */
    order: 700,
    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
    enabled: false,
    /** @prop {ModifierFn} */
    fn: inner
  },

  /**
   * Modifier used to hide the popper when its reference element is outside of the
   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
   * be used to hide with a CSS selector the popper when its reference is
   * out of boundaries.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   * @memberof modifiers
   * @inner
   */
  hide: {
    /** @prop {number} order=800 - Index used to define the order of execution */
    order: 800,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: hide
  },

  /**
   * Computes the style that will be applied to the popper element to gets
   * properly positioned.
   *
   * Note that this modifier will not touch the DOM, it just prepares the styles
   * so that `applyStyle` modifier can apply it. This separation is useful
   * in case you need to replace `applyStyle` with a custom implementation.
   *
   * This modifier has `850` as `order` value to maintain backward compatibility
   * with previous versions of Popper.js. Expect the modifiers ordering method
   * to change in future major versions of the library.
   *
   * @memberof modifiers
   * @inner
   */
  computeStyle: {
    /** @prop {number} order=850 - Index used to define the order of execution */
    order: 850,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: computeStyle,
    /**
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3d transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties.
     */
    gpuAcceleration: true,
    /**
     * @prop {string} [x='bottom']
     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
     * Change this if your popper should grow in a direction different from `bottom`
     */
    x: 'bottom',
    /**
     * @prop {string} [x='left']
     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
     * Change this if your popper should grow in a direction different from `right`
     */
    y: 'right'
  },

  /**
   * Applies the computed styles to the popper element.
   *
   * All the DOM manipulations are limited to this modifier. This is useful in case
   * you want to integrate Popper.js inside a framework or view library and you
   * want to delegate all the DOM manipulations to it.
   *
   * Note that if you disable this modifier, you must make sure the popper element
   * has its position set to `absolute` before Popper.js can do its work!
   *
   * Just disable this modifier and define you own to achieve the desired effect.
   *
   * @memberof modifiers
   * @inner
   */
  applyStyle: {
    /** @prop {number} order=900 - Index used to define the order of execution */
    order: 900,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: applyStyle,
    /** @prop {Function} */
    onLoad: applyStyleOnLoad,
    /**
     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3d transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties.
     */
    gpuAcceleration: undefined
  }
};

/**
 * The `dataObject` is an object containing all the informations used by Popper.js
 * this object get passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
 * @name dataObject
 * @property {Object} data.instance The Popper.js instance
 * @property {String} data.placement Placement applied to popper
 * @property {String} data.originalPlacement Placement originally defined on init
 * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
 * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper.
 * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
 * @property {Object} data.styles Any CSS property defined here will be applied to the popper, it expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow, it expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.boundaries Offsets of the popper boundaries
 * @property {Object} data.offsets The measurements of popper, reference and arrow elements.
 * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
 */

/**
 * Default options provided to Popper.js constructor.<br />
 * These can be overriden using the `options` argument of Popper.js.<br />
 * To override an option, simply pass as 3rd argument an object with the same
 * structure of this object, example:
 * ```
 * new Popper(ref, pop, {
 *   modifiers: {
 *     preventOverflow: { enabled: false }
 *   }
 * })
 * ```
 * @type {Object}
 * @static
 * @memberof Popper
 */
var Defaults = {
  /**
   * Popper's placement
   * @prop {Popper.placements} placement='bottom'
   */
  placement: 'bottom',

  /**
   * Whether events (resize, scroll) are initially enabled
   * @prop {Boolean} eventsEnabled=true
   */
  eventsEnabled: true,

  /**
   * Set to true if you want to automatically remove the popper when
   * you call the `destroy` method.
   * @prop {Boolean} removeOnDestroy=false
   */
  removeOnDestroy: false,

  /**
   * Callback called when the popper is created.<br />
   * By default, is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onCreate}
   */
  onCreate: function onCreate() {},

  /**
   * Callback called when the popper is updated, this callback is not called
   * on the initialization/creation of the popper, but only on subsequent
   * updates.<br />
   * By default, is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onUpdate}
   */
  onUpdate: function onUpdate() {},

  /**
   * List of modifiers used to modify the offsets before they are applied to the popper.
   * They provide most of the functionalities of Popper.js
   * @prop {modifiers}
   */
  modifiers: modifiers
};

/**
 * @callback onCreate
 * @param {dataObject} data
 */

/**
 * @callback onUpdate
 * @param {dataObject} data
 */

// Utils
// Methods
var Popper = function () {
  /**
   * Create a new Popper.js instance
   * @class Popper
   * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper
   * @param {HTMLElement} popper - The HTML element used as popper.
   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
   * @return {Object} instance - The generated Popper.js instance
   */
  function Popper(reference, popper) {
    var _this = this;

    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    classCallCheck(this, Popper);

    this.scheduleUpdate = function () {
      return requestAnimationFrame(_this.update);
    };

    // make update() debounced, so that it only runs at most once-per-tick
    this.update = debounce(this.update.bind(this));

    // with {} we create a new object with the options inside it
    this.options = _extends({}, Popper.Defaults, options);

    // init state
    this.state = {
      isDestroyed: false,
      isCreated: false,
      scrollParents: []
    };

    // get reference and popper elements (allow jQuery wrappers)
    this.reference = reference.jquery ? reference[0] : reference;
    this.popper = popper.jquery ? popper[0] : popper;

    // Deep merge modifiers options
    this.options.modifiers = {};
    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
    });

    // Refactoring modifiers' list (Object => Array)
    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
      return _extends({
        name: name
      }, _this.options.modifiers[name]);
    })
    // sort the modifiers by order
    .sort(function (a, b) {
      return a.order - b.order;
    });

    // modifiers have the ability to execute arbitrary code when Popper.js get inited
    // such code is executed in the same order of its modifier
    // they could add new properties to their options configuration
    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
    this.modifiers.forEach(function (modifierOptions) {
      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
      }
    });

    // fire the first update to position the popper in the right place
    this.update();

    var eventsEnabled = this.options.eventsEnabled;
    if (eventsEnabled) {
      // setup event listeners, they will take care of update the position in specific situations
      this.enableEventListeners();
    }

    this.state.eventsEnabled = eventsEnabled;
  }

  // We can't use class properties because they don't get listed in the
  // class prototype and break stuff like Sinon stubs


  createClass(Popper, [{
    key: 'update',
    value: function update$$1() {
      return update.call(this);
    }
  }, {
    key: 'destroy',
    value: function destroy$$1() {
      return destroy.call(this);
    }
  }, {
    key: 'enableEventListeners',
    value: function enableEventListeners$$1() {
      return enableEventListeners.call(this);
    }
  }, {
    key: 'disableEventListeners',
    value: function disableEventListeners$$1() {
      return disableEventListeners.call(this);
    }

    /**
     * Schedule an update, it will run on the next UI update available
     * @method scheduleUpdate
     * @memberof Popper
     */

    /**
     * Collection of utilities useful when writing custom modifiers.
     * Starting from version 1.7, this method is available only if you
     * include `popper-utils.js` before `popper.js`.
     *
     * **DEPRECATION**: This way to access PopperUtils is deprecated
     * and will be removed in v2! Use the PopperUtils module directly instead.
     * Due to the high instability of the methods contained in Utils, we can't
     * guarantee them to follow semver. Use them at your own risk!
     * @static
     * @private
     * @type {Object}
     * @deprecated since version 1.8
     * @member Utils
     * @memberof Popper
     */

  }]);
  return Popper;
}();

/**
 * The `referenceObject` is an object that provides an interface compatible with Popper.js
 * and lets you use it as replacement of a real DOM node.<br />
 * You can use this method to position a popper relatively to a set of coordinates
 * in case you don't have a DOM node to use as reference.
 *
 * ```
 * new Popper(referenceObject, popperNode);
 * ```
 *
 * NB: This feature isn't supported in Internet Explorer 10
 * @name referenceObject
 * @property {Function} data.getBoundingClientRect
 * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
 * @property {number} data.clientWidth
 * An ES6 getter that will return the width of the virtual reference element.
 * @property {number} data.clientHeight
 * An ES6 getter that will return the height of the virtual reference element.
 */

Popper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;
Popper.placements = placements;
Popper.Defaults = Defaults;

exports['default'] = Popper;
//# sourceMappingURL=popper.js.map

module.exports = exports['default'];
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var g;

// This works in non-strict mode
g = function () {
	return this;
}();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* eslint-disable no-undefined,no-param-reassign,no-shadow */

/**
 * Throttle execution of a function. Especially useful for rate limiting
 * execution of handlers on events like resize and scroll.
 *
 * @param  {Number}    delay          A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.
 * @param  {Boolean}   noTrailing     Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds while the
 *                                    throttled-function is being called. If noTrailing is false or unspecified, callback will be executed one final time
 *                                    after the last throttled-function call. (After the throttled-function has not been called for `delay` milliseconds,
 *                                    the internal counter is reset)
 * @param  {Function}  callback       A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,
 *                                    to `callback` when the throttled-function is executed.
 * @param  {Boolean}   debounceMode   If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is false (at end),
 *                                    schedule `callback` to execute after `delay` ms.
 *
 * @return {Function}  A new, throttled, function.
 */
module.exports = function (delay, noTrailing, callback, debounceMode) {

	// After wrapper has stopped being called, this timeout ensures that
	// `callback` is executed at the proper times in `throttle` and `end`
	// debounce modes.
	var timeoutID;

	// Keep track of the last time `callback` was executed.
	var lastExec = 0;

	// `noTrailing` defaults to falsy.
	if (typeof noTrailing !== 'boolean') {
		debounceMode = callback;
		callback = noTrailing;
		noTrailing = undefined;
	}

	// The `wrapper` function encapsulates all of the throttling / debouncing
	// functionality and when executed will limit the rate at which `callback`
	// is executed.
	function wrapper() {

		var self = this;
		var elapsed = Number(new Date()) - lastExec;
		var args = arguments;

		// Execute `callback` and update the `lastExec` timestamp.
		function exec() {
			lastExec = Number(new Date());
			callback.apply(self, args);
		}

		// If `debounceMode` is true (at begin) this is used to clear the flag
		// to allow future `callback` executions.
		function clear() {
			timeoutID = undefined;
		}

		if (debounceMode && !timeoutID) {
			// Since `wrapper` is being called for the first time and
			// `debounceMode` is true (at begin), execute `callback`.
			exec();
		}

		// Clear any existing timeout.
		if (timeoutID) {
			clearTimeout(timeoutID);
		}

		if (debounceMode === undefined && elapsed > delay) {
			// In throttle mode, if `delay` time has been exceeded, execute
			// `callback`.
			exec();
		} else if (noTrailing !== true) {
			// In trailing throttle mode, since `delay` time has not been
			// exceeded, schedule `callback` to execute `delay` ms after most
			// recent execution.
			//
			// If `debounceMode` is true (at begin), schedule `clear` to execute
			// after `delay` ms.
			//
			// If `debounceMode` is false (at end), schedule `callback` to
			// execute after `delay` ms.
			timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);
		}
	}

	// Return the wrapper function.
	return wrapper;
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./components/accordion/index.js": 5,
	"./components/carousel/index.js": 7,
	"./components/cookiebar/index.js": 8,
	"./components/datepicker/index.js": 11,
	"./components/dialog/index.js": 12,
	"./components/dropdown/index.js": 14,
	"./components/form/index.js": 16,
	"./components/masonry/index.js": 17,
	"./components/megamenu/index.js": 19,
	"./components/offcanvas/index.js": 21,
	"./components/random/index.js": 23,
	"./components/scrolltop/index.js": 24,
	"./components/skiplinks/index.js": 25,
	"./components/table/index.js": 27,
	"./components/treeview/index.js": 28,
	"./modules/header/index.js": 29,
	"./scripts/index.js": 31
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 4;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _frAccordion = __webpack_require__(6);

var _frAccordion2 = _interopRequireDefault(_frAccordion);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var accordion = (0, _frAccordion2['default'])({
	// String - Use header id on element to tie each accordion panel to its header - see panelIdPrefix
	headerIdPrefix: 'accordion-header',
	// String - Use panel id on element to tie each accordion header to its panel - see headerIdPrefix
	panelIdPrefix: 'accordion-panel',
	// Boolean - If set to false, all accordion panels will be closed on init()
	firstPanelsOpenByDefault: false,
	// Boolean - If set to false, each accordion instance will only allow a single panel to be open at a time
	multiselectable: true,
	// String - Class name that will be added to the selector when the component has been initialised
	readyClass: 'fr-accordion--is-ready'
});

exports['default'] = { accordion: accordion, Fraccordion: _frAccordion2['default'] };
module.exports = exports['default'];

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * @param {object} options Object containing configuration overrides
 */

Object.defineProperty(exports, "__esModule", {
	value: true
});
var Fraccordion = function Fraccordion() {
	var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	    _ref$selector = _ref.selector,
	    selector = _ref$selector === undefined ? '.js-fr-accordion' : _ref$selector,
	    _ref$headerSelector = _ref.headerSelector,
	    headerSelector = _ref$headerSelector === undefined ? '.js-fr-accordion__header' : _ref$headerSelector,
	    _ref$headerIdPrefix = _ref.headerIdPrefix,
	    headerIdPrefix = _ref$headerIdPrefix === undefined ? 'accordion-header' : _ref$headerIdPrefix,
	    _ref$panelSelector = _ref.panelSelector,
	    panelSelector = _ref$panelSelector === undefined ? '.js-fr-accordion__panel' : _ref$panelSelector,
	    _ref$panelIdPrefix = _ref.panelIdPrefix,
	    panelIdPrefix = _ref$panelIdPrefix === undefined ? 'accordion-panel' : _ref$panelIdPrefix,
	    _ref$firstPanelsOpenB = _ref.firstPanelsOpenByDefault,
	    firstPanelsOpenByDefault = _ref$firstPanelsOpenB === undefined ? true : _ref$firstPanelsOpenB,
	    _ref$multiselectable = _ref.multiselectable,
	    multiselectable = _ref$multiselectable === undefined ? true : _ref$multiselectable,
	    _ref$readyClass = _ref.readyClass,
	    readyClass = _ref$readyClass === undefined ? 'fr-accordion--is-ready' : _ref$readyClass,
	    _ref$transitionLength = _ref.transitionLength,
	    transitionLength = _ref$transitionLength === undefined ? 250 : _ref$transitionLength;

	// CONSTANTS
	var doc = document;
	var docEl = doc.documentElement;
	var _q = function _q(el) {
		var ctx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : doc;
		return [].slice.call(ctx.querySelectorAll(el));
	};

	// SUPPORTS
	if (!('querySelector' in doc) || !('addEventListener' in window) || !docEl.classList) return;

	// SETUP
	// set accordion element NodeLists
	var accordionContainers = _q(selector);

	// A11Y
	function _addA11y(accordionContainer) {
		// get accordion elements
		var accordionHeaders = _q(headerSelector, accordionContainer);
		var accordionPanels = _q(panelSelector, accordionContainer);

		// add relevant roles and properties
		accordionContainer.setAttribute('role', 'tablist');
		accordionContainer.setAttribute('aria-multiselectable', multiselectable);

		accordionHeaders.forEach(function (accordionHeader) {
			accordionHeader.setAttribute('role', 'tab');
			accordionHeader.setAttribute('aria-controls', accordionHeader.id.replace(headerIdPrefix, panelIdPrefix));
			// make headers focusable, this is preferred over wrapping contents in native button element
			accordionHeader.setAttribute('tabindex', 0);
		});

		accordionPanels.forEach(function (accordionPanel) {
			accordionPanel.setAttribute('role', 'tabpanel');
			accordionPanel.setAttribute('aria-labelledby', accordionPanel.id.replace(panelIdPrefix, headerIdPrefix));
			// make tabpanel focusable
			accordionPanel.setAttribute('tabindex', 0);
		});
	}
	function _removeA11y(accordionContainer) {
		// get accordion elements
		var accordionHeaders = _q(headerSelector, accordionContainer);
		var accordionPanels = _q(panelSelector, accordionContainer);

		// remove roles and properties
		accordionContainer.removeAttribute('role');
		accordionContainer.removeAttribute('aria-multiselectable');

		accordionHeaders.forEach(function (accordionHeader) {
			accordionHeader.removeAttribute('role');
			accordionHeader.removeAttribute('aria-controls');
			accordionHeader.removeAttribute('aria-selected');
			accordionHeader.removeAttribute('aria-expanded');
			// remove headers focusablility
			accordionHeader.removeAttribute('tabindex');
		});

		accordionPanels.forEach(function (accordionPanel) {
			accordionPanel.removeAttribute('role');
			accordionPanel.removeAttribute('aria-labelledby');
			accordionPanel.removeAttribute('aria-hidden');
			// remove tabpanel focusablibility
			accordionPanel.removeAttribute('tabindex');
		});
	}

	//	UTILS
	function _getPanelHeight(panel) {
		//	set auto height and read offsetHeight
		panel.style.height = 'auto';
		var height = panel.offsetHeight;
		//	remove style
		panel.style.height = '';
		return height;
	}
	function _setPanelHeight(panel) {
		//	get panel height
		var panelHeight = _getPanelHeight(panel);
		//	recalc style and layout
		panel.getBoundingClientRect();
		//	set height on panel, reset to 'auto' on transition complete
		panel.style.height = panelHeight + 'px';
		setTimeout(function () {
			panel.style.transition = 'none';
			panel.style.height = 'auto';
			//	recalc style and layout
			panel.getBoundingClientRect();
			panel.style.transition = '';
		}, transitionLength);
	}
	function _unsetPanelHeight(panel) {
		//	get panel height
		var panelHeight = _getPanelHeight(panel);
		//	set panel height from 'auto' to px
		panel.style.height = panelHeight + 'px';
		//	recalc style and layout
		panel.getBoundingClientRect();
		//	reset height
		panel.style.height = 0;
	}

	// ACTIONS
	function _hideAllPanels(accordionContainer) {
		// get accordion elements
		var siblingHeaders = _q(headerSelector, accordionContainer);
		var siblingPanels = _q(panelSelector, accordionContainer);

		// set inactives
		siblingHeaders.forEach(function (header) {
			header.setAttribute('tabindex', -1);
			header.setAttribute('aria-selected', 'false');
			header.setAttribute('aria-expanded', 'false');
		});
		siblingPanels.forEach(function (panel) {
			if (panel.getAttribute('aria-hidden') === 'false') _unsetPanelHeight(panel);
			//	toggle aria-hidden
			panel.setAttribute('aria-hidden', 'true');
		});
	}
	function _hidePanel(target) {
		//	get panel
		var activePanel = doc.getElementById(target.getAttribute('aria-controls'));
		target.setAttribute('aria-selected', 'false');
		target.setAttribute('aria-expanded', 'false');
		//	toggle aria-hidden
		_unsetPanelHeight(activePanel);
		activePanel.setAttribute('aria-hidden', 'true');
	}
	function _showPanel(target) {
		//	get panel
		var activePanel = doc.getElementById(target.getAttribute('aria-controls'));
		//	set attributes on header
		target.setAttribute('tabindex', 0);
		target.setAttribute('aria-selected', 'true');
		target.setAttribute('aria-expanded', 'true');
		//	toggle aria-hidden and set height on panel
		_setPanelHeight(activePanel);
		activePanel.setAttribute('aria-hidden', 'false');
		setTimeout(function () {
			return _bindAccordionEvents(target.parentNode);
		}, transitionLength);
	}
	function _togglePanel(target) {
		// get context of accordion container and its children
		var thisContainer = target.parentNode;
		// close target panel if already active
		if (target.getAttribute('aria-selected') === 'true') {
			_hidePanel(target);
			return;
		}
		// if not multiselectable hide all, then show target
		if (!multiselectable) _hideAllPanels(thisContainer);

		_showPanel(target);
		if (transitionLength > 0) _unbindAccordionEvents(thisContainer);
	}
	function _giveHeaderFocus(headerSet, i) {
		// remove focusability from inactives
		headerSet.forEach(function (header) {
			header.setAttribute('tabindex', -1);
		});
		// set active focus
		headerSet[i].setAttribute('tabindex', 0);
		headerSet[i].focus();
	}

	//	EVENTS
	function _eventHeaderClick(e) {
		_togglePanel(e.currentTarget);
	}
	function _eventHeaderKeydown(e) {
		// collect header targets, and their prev/next
		var currentHeader = e.currentTarget;
		var isModifierKey = e.metaKey || e.altKey;
		// get context of accordion container and its children
		var thisContainer = currentHeader.parentNode;
		var theseHeaders = _q(headerSelector, thisContainer);
		var currentHeaderIndex = [].indexOf.call(theseHeaders, currentHeader);

		// don't catch key events when ⌘ or Alt modifier is present
		if (isModifierKey) return;

		// catch enter/space, left/right and up/down arrow key events
		// if new panel show it, if next/prev move focus
		switch (e.keyCode) {
			case 13:
			case 32:
				_togglePanel(currentHeader);
				e.preventDefault();
				break;
			case 37:
			case 38:
				{
					var previousHeaderIndex = currentHeaderIndex === 0 ? theseHeaders.length - 1 : currentHeaderIndex - 1;
					_giveHeaderFocus(theseHeaders, previousHeaderIndex);
					e.preventDefault();
					break;
				}
			case 39:
			case 40:
				{
					var nextHeaderIndex = currentHeaderIndex < theseHeaders.length - 1 ? currentHeaderIndex + 1 : 0;
					_giveHeaderFocus(theseHeaders, nextHeaderIndex);
					e.preventDefault();
					break;
				}
			default:
				break;
		}
	}

	//	BIND EVENTS
	function _bindAccordionEvents(accordionContainer) {
		var accordionHeaders = _q(headerSelector, accordionContainer);
		// bind all accordion header click and keydown events
		accordionHeaders.forEach(function (accordionHeader) {
			accordionHeader.addEventListener('click', _eventHeaderClick);
			accordionHeader.addEventListener('keydown', _eventHeaderKeydown);
		});
	}

	//	UNBIND EVENTS
	function _unbindAccordionEvents(accordionContainer) {
		var accordionHeaders = _q(headerSelector, accordionContainer);
		// unbind all accordion header click and keydown events
		accordionHeaders.forEach(function (accordionHeader) {
			accordionHeader.removeEventListener('click', _eventHeaderClick);
			accordionHeader.removeEventListener('keydown', _eventHeaderKeydown);
		});
	}

	// DESTROY
	function destroy() {
		accordionContainers.forEach(function (accordionContainer) {
			_removeA11y(accordionContainer);
			_unbindAccordionEvents(accordionContainer);
			accordionContainer.classList.remove(readyClass);
		});
	}

	// INIT
	function init() {
		if (accordionContainers.length) {
			accordionContainers.forEach(function (accordionContainer) {
				_addA11y(accordionContainer);
				_bindAccordionEvents(accordionContainer);
				_hideAllPanels(accordionContainer);
				// set all first accordion panels active on init if required (default behaviour)
				// otherwise make sure first accordion header for each is focusable
				if (firstPanelsOpenByDefault) {
					_togglePanel(accordionContainer.querySelector(headerSelector));
				} else {
					accordionContainer.querySelector(headerSelector).setAttribute('tabindex', 0);
				}
				// set ready style hook
				accordionContainer.classList.add(readyClass);
			});
		}
	}
	init();

	// REVEAL API
	return {
		init: init,
		destroy: destroy
	};
};

// module exports
exports['default'] = Fraccordion;
module.exports = exports['default'];

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jquery = __webpack_require__(0);

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var opts = {
  owlPrev: '.owl-prev',
  owlNext: '.owl-next',
  owlItem: '.owl-item',
  jsSelector: '.owl-carousel',
  owlOpts: {
    nav: false,
    // navText: ['precedente', 'successivo'],
    items: 3,
    dots: false,
    loop: false,
    margin: 16,
    mouseDrag: true,
    URLhashListener: true,
    startPosition: 'URLHash',
    responsive: {
      0: {
        items: 1
      },
      768: {
        items: 2
      },
      992: {
        items: 3
      }
    }
  }
};

var init = function init() {
  var $owl = (0, _jquery2['default'])(opts.jsSelector);

  if ($owl.length <= 0) {
    return;
  }

  __webpack_require__.e/* require */(0).then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(40), __webpack_require__(41), __webpack_require__(42)]; (function () {
    (0, _jquery2['default'])(opts.owlPrev).click(function () {
      return $owl.trigger('prev.owl.carousel');
    });
    (0, _jquery2['default'])(opts.owlNext).click(function () {
      return $owl.trigger('next.owl.carousel');
    });

    $owl.on('initialized.owl.carousel changed.owl.carousel refreshed.owl.carousel', function (event) {
      if (!event.namespace) return;

      var carousel = event.relatedTarget,
          element = event.target,
          current = carousel.current();

      (0, _jquery2['default'])(opts.owlNext + '[aria-controls=\'' + element.id + '\']').toggleClass('u-visibilityHidden', current === carousel.maximum());

      (0, _jquery2['default'])(opts.owlPrev + '[aria-controls=\'' + element.id + '\']').toggleClass('u-visibilityHidden', current === carousel.minimum());
    });

    var settings = _jquery2['default'].extend({}, opts.owlOpts || {}, $owl.data('carouselOptions'));

    // must be called after events initialization
    $owl.owlCarousel(settings);
  }.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}).catch(__webpack_require__.oe);
};

(0, _jquery2['default'])(document).ready(init);

exports['default'] = {
  opts: opts,
  init: init
};
module.exports = exports['default'];

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jquery = __webpack_require__(0);

var _jquery2 = _interopRequireDefault(_jquery);

var _jquery3 = __webpack_require__(9);

var _jquery4 = _interopRequireDefault(_jquery3);

var _cookiebar = __webpack_require__(10);

var _cookiebar2 = _interopRequireDefault(_cookiebar);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/* eslint-enable no-unused-vars */

/* eslint-disable no-unused-vars */

var opts = {
  'acceptButton': '.js-cookieBarAccept',
  'secure': false,
  'path': '/',
  'domain': ''
};

(0, _jquery2['default'])(document).ready(function () {
  (0, _jquery2['default'])('.js-CookieBar').cookieBar(opts);
});

exports['default'] = {
  opts: opts
};
module.exports = exports['default'];

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * jQuery Cookie Plugin v1.4.1
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2013 Klaus Hartl
 * Released under the MIT license
 */
(function (factory) {
	if (true) {
		// AMD
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
		// CommonJS
		factory(require('jquery'));
	} else {
		// Browser globals
		factory(jQuery);
	}
})(function ($) {

	var pluses = /\+/g;

	function encode(s) {
		return config.raw ? s : encodeURIComponent(s);
	}

	function decode(s) {
		return config.raw ? s : decodeURIComponent(s);
	}

	function stringifyCookieValue(value) {
		return encode(config.json ? JSON.stringify(value) : String(value));
	}

	function parseCookieValue(s) {
		if (s.indexOf('"') === 0) {
			// This is a quoted cookie as according to RFC2068, unescape...
			s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
		}

		try {
			// Replace server-side written pluses with spaces.
			// If we can't decode the cookie, ignore it, it's unusable.
			// If we can't parse the cookie, ignore it, it's unusable.
			s = decodeURIComponent(s.replace(pluses, ' '));
			return config.json ? JSON.parse(s) : s;
		} catch (e) {}
	}

	function read(s, converter) {
		var value = config.raw ? s : parseCookieValue(s);
		return $.isFunction(converter) ? converter(value) : value;
	}

	var config = $.cookie = function (key, value, options) {

		// Write

		if (value !== undefined && !$.isFunction(value)) {
			options = $.extend({}, config.defaults, options);

			if (typeof options.expires === 'number') {
				var days = options.expires,
				    t = options.expires = new Date();
				t.setTime(+t + days * 864e+5);
			}

			return document.cookie = [encode(key), '=', stringifyCookieValue(value), options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
			options.path ? '; path=' + options.path : '', options.domain ? '; domain=' + options.domain : '', options.secure ? '; secure' : ''].join('');
		}

		// Read

		var result = key ? undefined : {};

		// To prevent the for loop in the first place assign an empty array
		// in case there are no cookies at all. Also prevents odd result when
		// calling $.cookie().
		var cookies = document.cookie ? document.cookie.split('; ') : [];

		for (var i = 0, l = cookies.length; i < l; i++) {
			var parts = cookies[i].split('=');
			var name = decode(parts.shift());
			var cookie = parts.join('=');

			if (key && key === name) {
				// If second argument (value) is a function it's a converter...
				result = read(cookie, value);
				break;
			}

			// Prevent storing a cookie that we couldn't decode.
			if (!key && (cookie = read(cookie)) !== undefined) {
				result[name] = cookie;
			}
		}

		return result;
	};

	config.defaults = {};

	$.removeCookie = function (key, options) {
		if ($.cookie(key) === undefined) {
			return false;
		}

		// Must not alter options, thus extending a fresh object...
		$.cookie(key, '', $.extend({}, options, { expires: -1 }));
		return !$.cookie(key);
	};
});

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _jquery = __webpack_require__(0);

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

_jquery2['default'].fn.cookieBar = function (options) {
  var settings = _jquery2['default'].extend({
    'acceptButton': '.js-cookieBarAccept',
    'secure': false,
    'path': '/',
    'domain': '',
    'threshold': 500
  }, options);

  var _hide = function _hide($cookiebar) {
    $cookiebar.attr('aria-hidden', 'true').attr('aria-live', 'off').hide();
  };

  var _show = function _show($cookiebar) {
    $cookiebar.attr('aria-hidden', 'false').attr('aria-live', 'polite').show();
  };

  var _accept = function _accept($cookiebar) {
    _jquery2['default'].cookie('cookiebar', 'hide', {
      path: settings.path,
      secure: settings.secure,
      domain: settings.domain,
      expires: 30
    });
    (0, _jquery2['default'])(document).trigger('accept.cookiebar', [$cookiebar]);
  };

  (0, _jquery2['default'])(document).on('accept.cookiebar', function (e, $cookiebar) {
    _hide($cookiebar);
  });

  _jquery2['default'].cookieBar = _jquery2['default'].cookieBar || {};

  _jquery2['default'].cookieBar.isAccepted = function () {
    return _jquery2['default'].cookie('cookiebar') === 'hide';
  };

  return this.each(function () {
    var $cookiebar = (0, _jquery2['default'])(this);

    if (!_jquery2['default'].cookieBar.isAccepted()) {
      if (settings.threshold > 0) {
        (0, _jquery2['default'])(window).on('scroll.cookiebar', function () {
          if ((0, _jquery2['default'])(window).scrollTop() > settings.threshold) {
            (0, _jquery2['default'])(window).unbind('scroll.cookiebar');
            _accept($cookiebar);
          }
        });
      }
      _show($cookiebar);
    }

    $cookiebar.find(settings.acceptButton).click(function () {
      _accept($cookiebar);
      return false;
    });
  });
};

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _jquery = __webpack_require__(0);

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

(0, _jquery2['default'])('.js-Datepicker').each(function (i, el) {
  (0, _jquery2['default'])(el).attr('type', 'text');

  __webpack_require__.e/* require */(1).then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [!(function webpackMissingModule() { var e = new Error("Cannot find module \"moment\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()), __webpack_require__(43)]; (function (Moment, Pikaday) {
    new Pikaday({
      field: (0, _jquery2['default'])(el)[0],
      trigger: (0, _jquery2['default'])('[aria-controls=\'' + el.id + '\']')[0],
      format: 'DD/MM/YYYY',
      i18n: {
        previousMonth: 'Mese precedente',
        nextMonth: 'Mese successivo',
        months: ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'],
        weekdays: ['Domenica', 'Lunedì', 'Martedì', 'Mercoledì', 'Giovedì', 'Venerdì', 'Sabato'],
        weekdaysShort: ['Dom', 'Lun', 'Mar', 'Mer', 'Gio', 'Ven', 'Sab']
      }
      // onSelect: () => {
      //   console.log(this.getMoment().format('Do MMMM YYYY'))
      // }
    });
  }.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}).catch(__webpack_require__.oe);
});

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _dialogmodal = __webpack_require__(13);

var _dialogmodal2 = _interopRequireDefault(_dialogmodal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var dialog = (0, _dialogmodal2['default'])({
  // String - Outer container selector, hook for JS init() method
  selector: '.js-fr-dialogmodal',

  // String - Modal selector, the element that represents the modal
  modalSelector: '.js-fr-dialogmodal-modal',

  // String - Selector for the open button
  openSelector: '.js-fr-dialogmodal-open',

  // String - Selector for the close button
  closeSelector: '.js-fr-dialogmodal-close',

  // Boolean - Switches the dialog role to alertdialog, only use this when representing an alert, error or warning
  isAlert: false,

  // String - Class name that will be added to the selector when the component has been initialised
  readyClass: 'fr-dialogmodal--is-ready',

  // String - Class name that will be added to the selector when the component is active
  activeClass: 'fr-dialogmodal--is-active'
});

exports['default'] = { dialog: dialog, Frdialogmodal: _dialogmodal2['default'] };
module.exports = exports['default'];

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * @param {object} options Object containing configuration overrides
 */

Object.defineProperty(exports, "__esModule", {
	value: true
});
var Frdialogmodal = function Frdialogmodal() {
	var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	    _ref$selector = _ref.selector,
	    selector = _ref$selector === undefined ? '.js-fr-dialogmodal' : _ref$selector,
	    _ref$modalSelector = _ref.modalSelector,
	    modalSelector = _ref$modalSelector === undefined ? '.js-fr-dialogmodal-modal' : _ref$modalSelector,
	    _ref$openSelector = _ref.openSelector,
	    openSelector = _ref$openSelector === undefined ? '.js-fr-dialogmodal-open' : _ref$openSelector,
	    _ref$closeSelector = _ref.closeSelector,
	    closeSelector = _ref$closeSelector === undefined ? '.js-fr-dialogmodal-close' : _ref$closeSelector,
	    _ref$isAlert = _ref.isAlert,
	    isAlert = _ref$isAlert === undefined ? false : _ref$isAlert,
	    _ref$readyClass = _ref.readyClass,
	    readyClass = _ref$readyClass === undefined ? 'fr-dialogmodal--is-ready' : _ref$readyClass,
	    _ref$activeClass = _ref.activeClass,
	    activeClass = _ref$activeClass === undefined ? 'fr-dialogmodal--is-active' : _ref$activeClass;

	// CONSTANTS
	var doc = document;
	var docEl = doc.documentElement;
	var _q = function _q(el) {
		var ctx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : doc;
		return [].slice.call(ctx.querySelectorAll(el));
	};

	// SUPPORTS
	if (!('querySelector' in doc) || !('addEventListener' in window) || !docEl.classList) return;

	// SETUP
	// set dialog modal element NodeLists
	var containers = _q(selector);
	var focusableSelectors = ['a[href]', 'area[href]', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'iframe', 'object', 'embed', '[contenteditable]', '[tabindex]:not([tabindex^="-"])'];
	//	TEMP
	var currButtonOpen = null;
	var currModal = null;
	//	elements within modal
	var focusableElements = null;

	//	UTILS
	function _defer(fn) {
		//	wrapped in setTimeout to delay binding until previous rendering has completed
		if (typeof fn === 'function') setTimeout(fn, 0);
	}

	//	A11Y
	function _addA11y(container) {
		var modal = _q(modalSelector, container)[0];
		var role = isAlert ? 'alertdialog' : 'dialog';
		//	add relevant roles and properties
		container.setAttribute('aria-hidden', true);
		modal.setAttribute('role', role);
	}
	function _removeA11y(container) {
		var modal = _q(modalSelector, container)[0];
		//	add relevant roles and properties
		container.removeAttribute('aria-hidden');
		modal.removeAttribute('role');
	}

	//	ACTIONS
	function _showModal(container, modal) {
		//	show container and focus the modal
		container.setAttribute('aria-hidden', false);
		modal.setAttribute('tabindex', -1);
		//	set first/last focusable elements
		focusableElements = _q(focusableSelectors.join(), modal);
		//	focus first element if exists, otherwise focus modal element
		if (focusableElements.length) focusableElements[0].focus();else modal.focus();
		//	update bound events
		_defer(_bindDocKey);
		_defer(_bindClosePointer);
		//	if contents are not interactive, bind click off
		if (!isAlert) _defer(_bindContainerPointer);
		//	reset scroll
		modal.scrollTop = 0;
		//	update style hook
		container.classList.add(activeClass);
	}
	function _hideModal(modal) {
		var returnfocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

		//	get container element
		var container = modal.parentElement;
		//	show container and focus the modal
		container.setAttribute('aria-hidden', true);
		modal.removeAttribute('tabindex');
		//	update bound events
		_unbindDocKey();
		_unbindClosePointer();
		//	if contents are not interactive, unbind click off
		if (!isAlert) _unbindContainerPointer();
		//	update style hook
		container.classList.remove(activeClass);
		//	return focus to button that opened the modal and reset the reference
		if (returnfocus) {
			currButtonOpen.focus();
			currButtonOpen = null;
		}
	}
	function _handleTabEvent(e) {
		//	get the index of the current active element within the modal
		var focusedIndex = focusableElements.indexOf(doc.activeElement);
		//	handle TAB event if need to skip
		//	if first element is focused and shiftkey is in use
		if (e.shiftKey && (focusedIndex === 0 || focusedIndex === -1)) {
			//	focus last item within modal
			focusableElements[focusableElements.length - 1].focus();
			e.preventDefault();
			//	if last element is focused and shiftkey is not in use
		} else if (!e.shiftKey && focusedIndex === focusableElements.length - 1) {
			//	focus first item within modal
			focusableElements[0].focus();
			e.preventDefault();
		}
	}

	//	EVENTS
	function _eventOpenPointer(e) {
		//	get related elements
		var button = e.currentTarget;
		var container = doc.getElementById(button.getAttribute('aria-controls'));
		var modal = _q(modalSelector, container)[0];
		//	save element references
		currButtonOpen = button;
		currModal = modal;
		//	show modal
		_showModal(container, modal);
	}
	function _eventClosePointer() {
		_hideModal(currModal);
	}
	function _eventContainerPointer(e) {
		var container = currModal.parentElement;
		//	check if target is modal container (but not modal)
		if (e.target === container) _hideModal(currModal);
	}
	function _eventDocKey(e) {
		//	ESC key
		if (e.keyCode === 27) _hideModal(currModal);
		//	TAB key
		if (e.keyCode === 9) _handleTabEvent(e);
	}

	//	BIND EVENTS
	function _bindOpenPointers(container) {
		var id = container.getAttribute('id');
		var buttons = _q(openSelector + '[aria-controls="' + id + '"]');
		buttons.forEach(function (button) {
			return button.addEventListener('click', _eventOpenPointer);
		});
	}
	function _bindClosePointer() {
		var modal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : currModal;

		var button = _q(closeSelector, modal)[0];
		button.addEventListener('click', _eventClosePointer);
	}
	function _bindContainerPointer() {
		var modal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : currModal;

		var container = modal.parentElement;
		container.addEventListener('click', _eventContainerPointer);
	}
	function _bindDocKey() {
		doc.addEventListener('keydown', _eventDocKey);
	}

	//	UNBIND EVENTS
	function _unbindOpenPointers(container) {
		var id = container.getAttribute('id');
		var buttons = doc.querySelectorAll(openSelector + '[aria-controls="' + id + '"]');
		buttons.forEach(function (button) {
			return button.removeEventListener('click', _eventOpenPointer);
		});
	}
	function _unbindClosePointer() {
		var modal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : currModal;

		var button = _q(closeSelector, modal)[0];
		button.removeEventListener('click', _eventClosePointer);
	}
	function _unbindContainerPointer() {
		var container = currModal.parentElement;
		container.removeEventListener('click', _eventContainerPointer);
	}
	function _unbindDocKey() {
		doc.removeEventListener('keydown', _eventDocKey);
	}

	//	DESTROY
	function destroy() {
		//	loop through available modals
		containers.forEach(function (container) {
			var modal = _q(modalSelector, container)[0];
			modal.removeAttribute('tabindex');
			_removeA11y(container);
			_unbindOpenPointers(container);
			_unbindClosePointer(modal);
			_unbindContainerPointer(modal);
			//	remove ready, active style hooks
			container.classList.remove(readyClass, activeClass);
		});
		_unbindDocKey();
	}

	//	INIT
	function init() {
		//	cancel if no modals found
		if (!containers.length) return;
		//	loop through available modals
		containers.forEach(function (container) {
			_addA11y(container);
			_bindOpenPointers(container);
			// set ready style hook
			container.classList.add(readyClass);
		});
	}
	init();

	// REVEAL API
	return {
		init: init,
		destroy: destroy
	};
};

// module exports
exports['default'] = Frdialogmodal;
module.exports = exports['default'];

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jquery = __webpack_require__(0);

var _jquery2 = _interopRequireDefault(_jquery);

var _popper = __webpack_require__(1);

var _popper2 = _interopRequireDefault(_popper);

var _dropdown = __webpack_require__(15);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

// auto-init on enhance (which is called on domready)

_jquery2['default'].fn['menu'] = function () {
  return this.each(function () {
    new _dropdown.Menu(this).init();
  });
};

_jquery2['default'].fn['menu-trigger'] = function () {
  return this.each(function () {
    new _dropdown.Menutrigger(this).init();
  });
};

(0, _jquery2['default'])(document).bind('enhance', function (e) {
  (0, _jquery2['default'])('[data-menu]', e.target)['menu']();
  (0, _jquery2['default'])('[data-menu-trigger]', e.target)['menu-trigger']();
});

////////////////////////////////////

(0, _jquery2['default'])('[data-menu-trigger]').not('[data-menu-inline]').each(function (i, el) {
  var $target = (0, _jquery2['default'])('#' + (0, _jquery2['default'])(el).attr('data-menu-trigger'));

  if (el && $target.length > 0) {
    new _popper2['default'](el, $target, {
      placement: 'bottom',
      modifiers: {
        arrow: {
          element: '.Dropdown-arrow'
        },
        flip: {
          behavior: ['left', 'right'],
          boundariesElement: 'scrollParent'
        }
        // preventOverflow: {
        //     boundariesElement: 'viewport'
        // },
      }
    });
  }
});

exports['default'] = {
  Menu: _dropdown.Menu,
  Menutrigger: _dropdown.Menutrigger
};
module.exports = exports['default'];

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = __webpack_require__(0);

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Fork of
 *
 * ! Menu - v0.1.3 - 2016-02-17
 * https://github.com/filamentgroup/menu
 * Copyright (c) 2016 Scott Jehl Licensed MIT
 */
var at = {
  ariaHidden: 'aria-hidden'
};
var selectClass = 'is-selected';
var focusables = 'a,input,[tabindex]';

var Menu = function () {
  function Menu(element) {
    _classCallCheck(this, Menu);

    if (!element) {
      throw new Error('Element required to initialize object');
    }
    this.element = element;
    this.$element = (0, _jquery2['default'])(element);
    this.opened = true;
    this.componentName = 'Menu';

    this.keycodes = {
      38: function _(e) {
        this.moveSelected('prev');
        e.preventDefault();
      },

      40: function _(e) {
        this.moveSelected('next');
        e.preventDefault();
      },

      // add right / left key navigation
      37: function _(e) {
        this.moveSelected('prev');
        e.preventDefault();
      },

      39: function _(e) {
        this.moveSelected('next');
        e.preventDefault();
      },

      13: function _() {
        // return the selected value
        return this.selectActive();
      },

      9: function _(e) {
        this.moveSelected(e.shiftKey ? 'prev' : 'next');
        e.preventDefault();
      },

      27: function _() {
        this.close();
      }
    };
  }

  _createClass(Menu, [{
    key: 'moveSelected',
    value: function moveSelected(placement, focus) {
      var $items = this.$element.find('li'),
          $selected = $items.filter('.' + selectClass),
          $nextSelected;

      if (!$selected.length || placement === 'start') {
        $nextSelected = $items.eq(0);
      } else if (placement === 'next') {
        $nextSelected = $selected.next();
        if (!$nextSelected.length) {
          $nextSelected = $items.eq(0);
        }
      } else {
        $nextSelected = $selected.prev();
        if (!$nextSelected.length) {
          $nextSelected = $items.eq($items.length - 1);
        }
      }
      $selected.removeClass(selectClass);
      $nextSelected.addClass(selectClass);

      if (focus || (0, _jquery2['default'])(window.document.activeElement).closest($selected).length) {
        if ($nextSelected.is(focusables)) {
          $nextSelected[0].focus();
        } else {
          var $focusChild = $nextSelected.find(focusables);
          if ($focusChild.length) {
            $focusChild[0].focus();
          }
        }
      }
    }
  }, {
    key: 'getSelectedElement',
    value: function getSelectedElement() {
      return this.$element.find('li.' + selectClass);
    }
  }, {
    key: 'selectActive',
    value: function selectActive() {
      var trigger = this.$element.data(this.componentName + '-trigger');
      var $selected = this.getSelectedElement();

      if (trigger && (0, _jquery2['default'])(trigger).is('input')) {
        trigger.value = $selected.text();
      }
      $selected.trigger(this.componentName + ':select');
      this.close();
      return $selected.text();
    }
  }, {
    key: 'keyDown',
    value: function keyDown(e) {
      var fn = this.keycodes[e.keyCode] || function () {};
      return fn.call(this, e);
    }
  }, {
    key: '_bindKeyHandling',
    value: function _bindKeyHandling() {
      var self = this;
      this.$element.bind('keydown', function (e) {
        self.keyDown(e);
      }).bind('mouseover', function (e) {
        self.$element.find('.' + selectClass).removeClass(selectClass);
        (0, _jquery2['default'])(e.target).closest('li').addClass(selectClass);
      }).bind('mouseleave', function (e) {
        (0, _jquery2['default'])(e.target).closest('li').removeClass(selectClass);
      }).bind('click', function () {
        self.selectActive();
      });
    }
  }, {
    key: 'open',
    value: function open(trigger, sendFocus) {
      if (this.opened) {
        return;
      }
      this.$element.attr(at.ariaHidden, false);
      this.$element.data(this.componentName + '-trigger', trigger);
      this.opened = true;
      this.moveSelected('start', sendFocus);
      this.$element.trigger(this.componentName + ':open');
    }
  }, {
    key: 'close',
    value: function close() {
      if (!this.opened) {
        return;
      }
      this.$element.attr(at.ariaHidden, true);
      this.opened = false;
      var $trigger = this.$element.data(this.componentName + '-trigger');
      if ($trigger) {
        $trigger.focus();
      }
      this.$element.trigger(this.componentName + ':close');
    }
  }, {
    key: 'toggle',
    value: function toggle(trigger, sendFocus) {
      this[this.opened ? 'close' : 'open'](trigger, sendFocus);
    }
  }, {
    key: 'init',
    value: function init() {
      // prevent re-init
      if (this.$element.data(this.componentName)) {
        return;
      }
      this.$element.data(this.componentName, this);

      this.$element.attr('role', 'menu')
      // @FIXME
      // design-web-toolkit mod:
      // be careful with the following as menuitem(s)
      // get a special treatment by screen readers
      .find('li').attr('role', 'menuitem');

      this.close();
      var self = this;

      // close on any click, even on the menu
      (0, _jquery2['default'])(document).bind('mouseup', function () {
        self.close();
      });

      this._bindKeyHandling();

      this.$element.trigger(this.componentName + ':init');
    }
  }]);

  return Menu;
}();

var Menutrigger = function () {
  function Menutrigger(element) {
    _classCallCheck(this, Menutrigger);

    if (!element) {
      throw new Error('Element required to initialize object');
    }
    this.element = element;
    this.$element = (0, _jquery2['default'])(element);
    this.$menu = (0, _jquery2['default'])('#' + this.$element.attr('data-menu-trigger'));
    this.menu = this.$menu.data('Menu');
    this.componentName = 'Menutrigger';
  }

  _createClass(Menutrigger, [{
    key: '_bindbehavior',
    value: function _bindbehavior() {
      var self = this;

      if (this.$element.is('a')) {
        this.$element.attr('role', 'button').bind('click', function (e) {
          e.preventDefault();
          self.menu.toggle(this, true);
        });
      } else if (this.$element.is('button')) {
        this.$element.bind('click', function (e) {
          e.preventDefault();
          self.menu.toggle(this, true);
        });
      } else if (this.$element.is('input')) {
        this.$element.bind('input keyup', function () {
          if (this.value === '') {
            self.menu.close();
          } else {
            self.menu.open(this, false);
          }
        }).bind('input keydown', function (e) {
          self.menu.keyDown(e);
        }).bind('focus click', function () {
          if (this.value !== '') {
            self.menu.open();
          }
        }).bind('blur', function () {
          self.menu.close();
        });
      }
    }
  }, {
    key: 'init',
    value: function init() {
      // prevent re-init
      if (this.$element.data(this.componentName)) {
        return;
      }
      this.$element.data(this.componentName, this);

      // add attrs
      this.$element.attr('aria-controls', this.$menu.attr('id'));
      this.$element.attr('aria-haspopup', 'true');

      this._bindbehavior();

      this.$element.trigger(this.componentName + ':init');
    }
  }]);

  return Menutrigger;
}();

exports['default'] = {
  Menu: Menu,
  Menutrigger: Menutrigger
};
module.exports = exports['default'];

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _jquery = __webpack_require__(0);

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

(0, _jquery2['default'])(document).ready(function () {
  (0, _jquery2['default'])(':radio, :checkbox').on('change', function () {
    if ((0, _jquery2['default'])(this).is(':radio')) {
      (0, _jquery2['default'])(this).closest('.Form-field').find('.Form-label.is-checked').removeClass('is-checked');
    }
    if ((0, _jquery2['default'])(this).is(':checked')) {
      (0, _jquery2['default'])(this).closest('.Form-label').addClass('is-checked');
    } else {
      (0, _jquery2['default'])(this).closest('.Form-label').removeClass('is-checked');
    }
  });
});

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jquery = __webpack_require__(0);

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var Masonry = null;

(0, _jquery2['default'])(function () {
  if ((0, _jquery2['default'])('.js-Masonry-container').length > 0) {
    try {
      Masonry = __webpack_require__(18);
    } catch (e) {
      /* HEY, I'm IE8 */
    }
  }
});

exports['default'] = {
  Masonry: Masonry
};
module.exports = exports['default'];

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * Salvattore 1.0.9 by @rnmp and @ppold
 * https://github.com/rnmp/salvattore
 */
(function (root, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
    module.exports = factory();
  } else {
    root.salvattore = factory();
  }
})(undefined, function () {
  /*! matchMedia() polyfill - Test a CSS media type/query in JS. Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license */

  if (!window.matchMedia) {
    window.matchMedia = function () {
      "use strict";

      // For browsers that support matchMedium api such as IE 9 and webkit

      var styleMedia = window.styleMedia || window.media;

      // For those that don't support matchMedium
      if (!styleMedia) {
        var style = document.createElement('style'),
            script = document.getElementsByTagName('script')[0],
            info = null;

        style.type = 'text/css';
        style.id = 'matchmediajs-test';

        script.parentNode.insertBefore(style, script);

        // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers
        info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;

        styleMedia = {
          matchMedium: function matchMedium(media) {
            var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';

            // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers
            if (style.styleSheet) {
              style.styleSheet.cssText = text;
            } else {
              style.textContent = text;
            }

            // Test if media query is true or false
            return info.width === '1px';
          }
        };
      }

      return function (media) {
        return {
          matches: styleMedia.matchMedium(media || 'all'),
          media: media || 'all'
        };
      };
    }();
  }

  /*! matchMedia() polyfill addListener/removeListener extension. Author & copyright (c) 2012: Scott Jehl. Dual MIT/BSD license */
  (function () {
    "use strict";

    // Bail out for browsers that have addListener support

    if (window.matchMedia && window.matchMedia('all').addListener) {
      return false;
    }

    var localMatchMedia = window.matchMedia,
        hasMediaQueries = localMatchMedia('only all').matches,
        isListening = false,
        timeoutID = 0,
        // setTimeout for debouncing 'handleChange'
    queries = [],
        // Contains each 'mql' and associated 'listeners' if 'addListener' is used
    handleChange = function handleChange(evt) {
      // Debounce
      clearTimeout(timeoutID);

      timeoutID = setTimeout(function () {
        for (var i = 0, il = queries.length; i < il; i++) {
          var mql = queries[i].mql,
              listeners = queries[i].listeners || [],
              matches = localMatchMedia(mql.media).matches;

          // Update mql.matches value and call listeners
          // Fire listeners only if transitioning to or from matched state
          if (matches !== mql.matches) {
            mql.matches = matches;

            for (var j = 0, jl = listeners.length; j < jl; j++) {
              listeners[j].call(window, mql);
            }
          }
        }
      }, 30);
    };

    window.matchMedia = function (media) {
      var mql = localMatchMedia(media),
          listeners = [],
          index = 0;

      mql.addListener = function (listener) {
        // Changes would not occur to css media type so return now (Affects IE <= 8)
        if (!hasMediaQueries) {
          return;
        }

        // Set up 'resize' listener for browsers that support CSS3 media queries (Not for IE <= 8)
        // There should only ever be 1 resize listener running for performance
        if (!isListening) {
          isListening = true;
          window.addEventListener('resize', handleChange, true);
        }

        // Push object only if it has not been pushed already
        if (index === 0) {
          index = queries.push({
            mql: mql,
            listeners: listeners
          });
        }

        listeners.push(listener);
      };

      mql.removeListener = function (listener) {
        for (var i = 0, il = listeners.length; i < il; i++) {
          if (listeners[i] === listener) {
            listeners.splice(i, 1);
          }
        }
      };

      return mql;
    };
  })();

  // http://paulirish.com/2011/requestanimationframe-for-smart-animating/
  // http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating

  // requestAnimationFrame polyfill by Erik Möller. fixes from Paul Irish and Tino Zijdel

  // MIT license

  (function () {
    "use strict";

    var lastTime = 0;
    var vendors = ['ms', 'moz', 'webkit', 'o'];
    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
      window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
      window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
    }

    if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback, element) {
      var currTime = new Date().getTime();
      var timeToCall = Math.max(0, 16 - (currTime - lastTime));
      var id = window.setTimeout(function () {
        callback(currTime + timeToCall);
      }, timeToCall);
      lastTime = currTime + timeToCall;
      return id;
    };

    if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {
      clearTimeout(id);
    };
  })();

  // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent

  if (typeof window.CustomEvent !== "function") {
    (function () {
      "use strict";

      function CustomEvent(event, params) {
        params = params || { bubbles: false, cancelable: false, detail: undefined };
        var evt = document.createEvent('CustomEvent');
        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
        return evt;
      }

      CustomEvent.prototype = window.Event.prototype;

      window.CustomEvent = CustomEvent;
    })();
  }

  /* jshint laxcomma: true */
  var salvattore = function (global, document, undefined) {
    "use strict";

    var self = {},
        grids = [],
        mediaRules = [],
        mediaQueries = [],
        add_to_dataset = function add_to_dataset(element, key, value) {
      // uses dataset function or a fallback for <ie10
      if (element.dataset) {
        element.dataset[key] = value;
      } else {
        element.setAttribute("data-" + key, value);
      }
      return;
    };

    self.obtainGridSettings = function obtainGridSettings(element) {
      // returns the number of columns and the classes a column should have,
      // from computing the style of the ::before pseudo-element of the grid.

      var computedStyle = global.getComputedStyle(element, ":before"),
          content = computedStyle.getPropertyValue("content").slice(1, -1),
          matchResult = content.match(/^\s*(\d+)(?:\s?\.(.+))?\s*$/),
          numberOfColumns = 1,
          columnClasses = [];

      if (matchResult) {
        numberOfColumns = matchResult[1];
        columnClasses = matchResult[2];
        columnClasses = columnClasses ? columnClasses.split(".") : ["column"];
      } else {
        matchResult = content.match(/^\s*\.(.+)\s+(\d+)\s*$/);
        if (matchResult) {
          columnClasses = matchResult[1];
          numberOfColumns = matchResult[2];
          if (numberOfColumns) {
            numberOfColumns = numberOfColumns.split(".");
          }
        }
      }

      return {
        numberOfColumns: numberOfColumns,
        columnClasses: columnClasses
      };
    };

    self.addColumns = function addColumns(grid, items) {
      // from the settings obtained, it creates columns with
      // the configured classes and adds to them a list of items.

      var settings = self.obtainGridSettings(grid),
          numberOfColumns = settings.numberOfColumns,
          columnClasses = settings.columnClasses,
          columnsItems = new Array(+numberOfColumns),
          columnsFragment = document.createDocumentFragment(),
          i = numberOfColumns,
          selector;

      while (i-- !== 0) {
        selector = "[data-columns] > *:nth-child(" + numberOfColumns + "n-" + i + ")";
        columnsItems.push(items.querySelectorAll(selector));
      }

      columnsItems.forEach(function append_to_grid_fragment(rows) {
        var column = document.createElement("div"),
            rowsFragment = document.createDocumentFragment();

        column.className = columnClasses.join(" ");

        Array.prototype.forEach.call(rows, function append_to_column(row) {
          rowsFragment.appendChild(row);
        });
        column.appendChild(rowsFragment);
        columnsFragment.appendChild(column);
      });

      grid.appendChild(columnsFragment);
      add_to_dataset(grid, 'columns', numberOfColumns);
    };

    self.removeColumns = function removeColumns(grid) {
      // removes all the columns from a grid, and returns a list
      // of items sorted by the ordering of columns.

      var range = document.createRange();
      range.selectNodeContents(grid);

      var columns = Array.prototype.filter.call(range.extractContents().childNodes, function filter_elements(node) {
        return node instanceof global.HTMLElement;
      });

      var numberOfColumns = columns.length,
          numberOfRowsInFirstColumn = columns[0].childNodes.length,
          sortedRows = new Array(numberOfRowsInFirstColumn * numberOfColumns);

      Array.prototype.forEach.call(columns, function iterate_columns(column, columnIndex) {
        Array.prototype.forEach.call(column.children, function iterate_rows(row, rowIndex) {
          sortedRows[rowIndex * numberOfColumns + columnIndex] = row;
        });
      });

      var container = document.createElement("div");
      add_to_dataset(container, 'columns', 0);

      sortedRows.filter(function filter_non_null(child) {
        return !!child;
      }).forEach(function append_row(child) {
        container.appendChild(child);
      });

      return container;
    };

    self.recreateColumns = function recreateColumns(grid) {
      // removes all the columns from the grid, and adds them again,
      // it is used when the number of columns change.

      global.requestAnimationFrame(function render_after_css_mediaQueryChange() {
        self.addColumns(grid, self.removeColumns(grid));
        var columnsChange = new CustomEvent("columnsChange");
        grid.dispatchEvent(columnsChange);
      });
    };

    self.mediaQueryChange = function mediaQueryChange(mql) {
      // recreates the columns when a media query matches the current state
      // of the browser.

      if (mql.matches) {
        Array.prototype.forEach.call(grids, self.recreateColumns);
      }
    };

    self.getCSSRules = function getCSSRules(stylesheet) {
      // returns a list of css rules from a stylesheet

      var cssRules;
      try {
        cssRules = stylesheet.sheet.cssRules || stylesheet.sheet.rules;
      } catch (e) {
        return [];
      }

      return cssRules || [];
    };

    self.getStylesheets = function getStylesheets() {
      // returns a list of all the styles in the document (that are accessible).

      var inlineStyleBlocks = Array.prototype.slice.call(document.querySelectorAll("style"));
      inlineStyleBlocks.forEach(function (stylesheet, idx) {
        if (stylesheet.type !== 'text/css' && stylesheet.type !== '') {
          inlineStyleBlocks.splice(idx, 1);
        }
      });

      return Array.prototype.concat.call(inlineStyleBlocks, Array.prototype.slice.call(document.querySelectorAll("link[rel='stylesheet']")));
    };

    self.mediaRuleHasColumnsSelector = function mediaRuleHasColumnsSelector(rules) {
      // checks if a media query css rule has in its contents a selector that
      // styles the grid.

      var i, rule;

      try {
        i = rules.length;
      } catch (e) {
        i = 0;
      }

      while (i--) {
        rule = rules[i];
        if (rule.selectorText && rule.selectorText.match(/\[data-columns\](.*)::?before$/)) {
          return true;
        }
      }

      return false;
    };

    self.scanMediaQueries = function scanMediaQueries() {
      // scans all the stylesheets for selectors that style grids,
      // if the matchMedia API is supported.

      var newMediaRules = [];

      if (!global.matchMedia) {
        return;
      }

      self.getStylesheets().forEach(function extract_rules(stylesheet) {
        Array.prototype.forEach.call(self.getCSSRules(stylesheet), function filter_by_column_selector(rule) {
          // rule.media throws an 'not implemented error' in ie9 for import rules occasionally
          try {
            if (rule.media && rule.cssRules && self.mediaRuleHasColumnsSelector(rule.cssRules)) {
              newMediaRules.push(rule);
            }
          } catch (e) {}
        });
      });

      // remove matchMedia listeners from the old rules
      var oldRules = mediaRules.filter(function (el) {
        return newMediaRules.indexOf(el) === -1;
      });
      mediaQueries.filter(function (el) {
        return oldRules.indexOf(el.rule) !== -1;
      }).forEach(function (el) {
        el.mql.removeListener(self.mediaQueryChange);
      });
      mediaQueries = mediaQueries.filter(function (el) {
        return oldRules.indexOf(el.rule) === -1;
      });

      // add matchMedia listeners to the new rules
      newMediaRules.filter(function (el) {
        return mediaRules.indexOf(el) == -1;
      }).forEach(function (rule) {
        var mql = global.matchMedia(rule.media.mediaText);
        mql.addListener(self.mediaQueryChange);
        mediaQueries.push({ rule: rule, mql: mql });
      });

      // swap mediaRules with the new set
      mediaRules.length = 0;
      mediaRules = newMediaRules;
    };

    self.rescanMediaQueries = function rescanMediaQueries() {
      self.scanMediaQueries();
      Array.prototype.forEach.call(grids, self.recreateColumns);
    };

    self.nextElementColumnIndex = function nextElementColumnIndex(grid, fragments) {
      // returns the index of the column where the given element must be added.

      var children = grid.children,
          m = children.length,
          lowestRowCount = 0,
          child,
          currentRowCount,
          i,
          index = 0;
      for (i = 0; i < m; i++) {
        child = children[i];
        currentRowCount = child.children.length + (fragments[i].children || fragments[i].childNodes).length;
        if (lowestRowCount === 0) {
          lowestRowCount = currentRowCount;
        }
        if (currentRowCount < lowestRowCount) {
          index = i;
          lowestRowCount = currentRowCount;
        }
      }

      return index;
    };

    self.createFragmentsList = function createFragmentsList(quantity) {
      // returns a list of fragments

      var fragments = new Array(quantity),
          i = 0;

      while (i !== quantity) {
        fragments[i] = document.createDocumentFragment();
        i++;
      }

      return fragments;
    };

    self.appendElements = function appendElements(grid, elements) {
      // adds a list of elements to the end of a grid

      var columns = grid.children,
          numberOfColumns = columns.length,
          fragments = self.createFragmentsList(numberOfColumns);

      Array.prototype.forEach.call(elements, function append_to_next_fragment(element) {
        var columnIndex = self.nextElementColumnIndex(grid, fragments);
        fragments[columnIndex].appendChild(element);
      });

      Array.prototype.forEach.call(columns, function insert_column(column, index) {
        column.appendChild(fragments[index]);
      });
    };

    self.prependElements = function prependElements(grid, elements) {
      // adds a list of elements to the start of a grid

      var columns = grid.children,
          numberOfColumns = columns.length,
          fragments = self.createFragmentsList(numberOfColumns),
          columnIndex = numberOfColumns - 1;

      elements.forEach(function append_to_next_fragment(element) {
        var fragment = fragments[columnIndex];
        fragment.insertBefore(element, fragment.firstChild);
        if (columnIndex === 0) {
          columnIndex = numberOfColumns - 1;
        } else {
          columnIndex--;
        }
      });

      Array.prototype.forEach.call(columns, function insert_column(column, index) {
        column.insertBefore(fragments[index], column.firstChild);
      });

      // populates a fragment with n columns till the right
      var fragment = document.createDocumentFragment(),
          numberOfColumnsToExtract = elements.length % numberOfColumns;

      while (numberOfColumnsToExtract-- !== 0) {
        fragment.appendChild(grid.lastChild);
      }

      // adds the fragment to the left
      grid.insertBefore(fragment, grid.firstChild);
    };

    self.registerGrid = function registerGrid(grid) {
      if (global.getComputedStyle(grid).display === "none") {
        return;
      }

      // retrieve the list of items from the grid itself
      var range = document.createRange();
      range.selectNodeContents(grid);

      var items = document.createElement("div");
      items.appendChild(range.extractContents());

      add_to_dataset(items, 'columns', 0);
      self.addColumns(grid, items);
      grids.push(grid);
    };

    self.init = function init() {
      // adds required CSS rule to hide 'content' based
      // configuration.

      var css = document.createElement("style");
      css.innerHTML = "[data-columns]::before{display:block;visibility:hidden;position:absolute;font-size:1px;}";
      document.head.appendChild(css);

      // scans all the grids in the document and generates
      // columns from their configuration.

      var gridElements = document.querySelectorAll("[data-columns]");
      Array.prototype.forEach.call(gridElements, self.registerGrid);
      self.scanMediaQueries();
    };

    self.init();

    return {
      appendElements: self.appendElements,
      prependElements: self.prependElements,
      registerGrid: self.registerGrid,
      recreateColumns: self.recreateColumns,
      rescanMediaQueries: self.rescanMediaQueries,
      init: self.init,

      // maintains backwards compatibility with underscore style method names
      append_elements: self.appendElements,
      prepend_elements: self.prependElements,
      register_grid: self.registerGrid,
      recreate_columns: self.recreateColumns,
      rescan_media_queries: self.rescanMediaQueries
    };
  }(window, window.document);

  return salvattore;
});

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jquery = __webpack_require__(0);

var _jquery2 = _interopRequireDefault(_jquery);

var _popper = __webpack_require__(1);

var _popper2 = _interopRequireDefault(_popper);

var _megamenu = __webpack_require__(20);

var _megamenu2 = _interopRequireDefault(_megamenu);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

// ASAP hide megamenu panels
(0, _jquery2['default'])('.js-megamenu').addClass('is-ready');

var opts = {
  /* add a close button to every subnav */
  addCloseButton: false,

  closeButtonClass: 'js-Megamenu-close',

  closeButtonTemplate: '<button title="chiudi il menu" class="Megamenu-close js-Megamenu-close">\n    <span class="Icon Icon-close"></span><span class="u-hiddenVisually">chiudi</span></button>',

  /* if false open menu on hover */
  openOnClick: true,

  /* prefix for generated unique id attributes, which are required
     to indicate aria-owns, aria-controls and aria-labelledby */
  uuidPrefix: 'megamenu',

  /* css class used to define the megamenu styling */
  menuClass: 'Megamenu',

  menuListClass: 'Megamenu-list',

  /* css class for a top-level navigation item in the megamenu */
  topNavItemClass: 'Megamenu-item',

  /* css class for a megamenu panel */
  panelClass: 'Megamenu-subnav',

  /* css class for a group of items within a megamenu panel */
  panelGroupClass: 'Megamenu-subnavGroup',

  /* css class for the hover state */
  hoverClass: 'is-hover',

  /* css class for the focus state */
  focusClass: 'is-focus',

  /* css class for the open state */
  openClass: 'is-open'

  /*
   *	Takes a Treeview and makes it work with Megamenu
   */
};var listToMegaMenu = function listToMegaMenu($ul, _opts) {
  var attrs = 'class aria-expanded aria-hidden role tabindex';
  return $ul.clone().removeAttr(attrs).addClass(_opts.menuListClass).find('*').removeAttr(attrs).end().find('> li').each(function (i, li) {
    (0, _jquery2['default'])(li).addClass(function () {
      var className = (0, _jquery2['default'])(this).data('megamenu-class');
      return className ? className : _opts.topNavItemClass;
    }).find('[data-megamenu-class]').addClass(function () {
      return (0, _jquery2['default'])(this).data('megamenu-class');
    }).end().find('a')
    // make item tabbable, this is required !
    // .attr('href', '#')
    .end().find('> ul > li').unwrap().wrap('<ul class="' + _opts.panelGroupClass + '" />').end().find('> ul').wrapAll('<div class="' + _opts.panelClass + '" />');
  }).end();
};

(0, _jquery2['default'])(document).ready(function () {
  (0, _jquery2['default'])('.js-megamenu').each(function (i, el) {
    var $el = (0, _jquery2['default'])(el);
    var rel = (0, _jquery2['default'])(el).data('rel');

    if ($el.find('ul').length === 0 && rel && (0, _jquery2['default'])(rel).length > 0) {
      var $menu = listToMegaMenu((0, _jquery2['default'])(rel), opts);
      $el.append($menu);
      // @FIXME: make space for javascript rendered megamenu
      if ((0, _jquery2['default'])('header').css('position') === 'fixed') {
        (0, _jquery2['default'])('body').css({
          paddingTop: '+=' + $el.height() + 'px'
        });
      }
    }

    $el.find('.' + opts.panelClass).append('<span class="Icon-drop-down Dropdown-arrow u-color-white"></span>');

    $el.accessibleMegaMenu(opts);

    if (opts.addCloseButton) {
      (0, _jquery2['default'])(opts.closeButtonTemplate).appendTo((0, _jquery2['default'])('.' + opts.panelClass));
    }

    (0, _jquery2['default'])('.' + opts.closeButtonClass).on('click', function () {
      var e = _jquery2['default'].Event('keydown');
      e.which = 27;
      (0, _jquery2['default'])('.' + opts.menuClass).trigger(e);
      return false;
    });
  });

  (0, _jquery2['default'])('.' + opts.topNavItemClass + ' > a').each(function (i, el) {
    var $target = (0, _jquery2['default'])(el).parent().find('.' + opts.panelClass).not(el);

    if (el && $target.length > 0) {
      new _popper2['default'](el, $target, {
        placement: 'bottom',
        modifiers: {
          arrow: {
            element: '.Dropdown-arrow'
          },
          flip: {
            enabled: false
          },
          preventOverflow: {
            padding: 8,
            priority: ['right', 'left'],
            boundariesElement: 'scrollParent'
          }
        }
      });
    }
  });
});

exports['default'] = {
  opts: opts,
  listToMegaMenu: listToMegaMenu,
  Megamenu: _megamenu2['default']
};
module.exports = exports['default'];

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
Copyright © 2013 Adobe Systems Incorporated.

Licensed under the Apache License, Version 2.0 (the “License”)
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an “AS IS” BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * @fileOverview accessibleMegaMenu plugin
 *
 *<p>Licensed under the Apache License, Version 2.0 (the “License”)
 *<br />Copyright © 2013 Adobe Systems Incorporated.
 *<br />Project page <a href='https://github.com/adobe-accessibility/Accessible-Mega-Menu'>https://github.com/adobe-accessibility/Accessible-Mega-Menu</a>
 * @version 0.1
 * @author Michael Jordan
 * @requires jquery
 */

/*jslint browser: true, devel: true, plusplus: true, nomen: true */
/*global jQuery */
(function ($, window, document) {
  var pluginName = 'accessibleMegaMenu',
      defaults = {
    openOnClick: false,
    uuidPrefix: 'accessible-megamenu', // unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby
    menuClass: 'accessible-megamenu', // default css class used to define the megamenu styling
    topNavItemClass: 'accessible-megamenu-top-nav-item', // default css class for a top-level navigation item in the megamenu
    panelClass: 'accessible-megamenu-panel', // default css class for a megamenu panel
    panelGroupClass: 'accessible-megamenu-panel-group', // default css class for a group of items within a megamenu panel
    hoverClass: 'hover', // default css class for the hover state
    focusClass: 'focus', // default css class for the focus state
    openClass: 'open' // default css class for the open state
  },
      Keyboard = {
    BACKSPACE: 8,
    COMMA: 188,
    DELETE: 46,
    DOWN: 40,
    END: 35,
    ENTER: 13,
    ESCAPE: 27,
    HOME: 36,
    LEFT: 37,
    PAGE_DOWN: 34,
    PAGE_UP: 33,
    PERIOD: 190,
    RIGHT: 39,
    SPACE: 32,
    TAB: 9,
    UP: 38,
    keyMap: {
      48: '0',
      49: '1',
      50: '2',
      51: '3',
      52: '4',
      53: '5',
      54: '6',
      55: '7',
      56: '8',
      57: '9',
      59: '',
      65: 'a',
      66: 'b',
      67: 'c',
      68: 'd',
      69: 'e',
      70: 'f',
      71: 'g',
      72: 'h',
      73: 'i',
      74: 'j',
      75: 'k',
      76: 'l',
      77: 'm',
      78: 'n',
      79: 'o',
      80: 'p',
      81: 'q',
      82: 'r',
      83: 's',
      84: 't',
      85: 'u',
      86: 'v',
      87: 'w',
      88: 'x',
      89: 'y',
      90: 'z',
      96: '0',
      97: '1',
      98: '2',
      99: '3',
      100: '4',
      101: '5',
      102: '6',
      103: '7',
      104: '8',
      105: '9',
      190: '.'
    }
    /**
     * @desc Creates a new accessible mega menu instance.
     * @param {jquery} element
     * @param {object} [options] Mega Menu options
     * @param {string} [options.uuidPrefix=accessible-megamenu] - Prefix for generated unique id attributes, which are required to indicate aria-owns, aria-controls and aria-labelledby
     * @param {string} [options.menuClass=accessible-megamenu] - CSS class used to define the megamenu styling
     * @param {string} [options.topNavItemClass=accessible-megamenu-top-nav-item] - CSS class for a top-level navigation item in the megamenu
     * @param {string} [options.panelClass=accessible-megamenu-panel] - CSS class for a megamenu panel
     * @param {string} [options.panelGroupClass=accessible-megamenu-panel-group] - CSS class for a group of items within a megamenu panel
     * @param {string} [options.hoverClass=hover] - CSS class for the hover state
     * @param {string} [options.focusClass=focus] - CSS class for the focus state
     * @param {string} [options.openClass=open] - CSS class for the open state
     * @constructor
     */
  };function AccessibleMegaMenu(element, options) {
    this.element = element;

    // merge optional settings and defaults into settings
    this.settings = $.extend({}, defaults, options);

    this._defaults = defaults;
    this._name = pluginName;

    this.mouseTimeoutID = null;
    this.focusTimeoutID = null;
    this.mouseFocused = false;
    this.justFocused = false;

    this.init();
  }

  AccessibleMegaMenu.prototype = function () {

    /* private attributes and methods ------------------------ */
    var uuid = 0,
        keydownTimeoutDuration = 1000,
        keydownSearchString = '',
        isTouch = typeof window.hasOwnProperty === 'function' && !!window.hasOwnProperty('ontouchstart'),
        _getPlugin,
        _addUniqueId,
        _togglePanel,
        _clickHandler,
        _clickOutsideHandler,
        _DOMAttrModifiedHandler,
        _focusInHandler,
        _focusOutHandler,
        _keyDownHandler,
        _mouseDownHandler,
        _mouseOverHandler,
        _mouseOutHandler,
        _toggleExpandedEventHandlers;

    /**
     * @name jQuery.fn.accessibleMegaMenu~_getPlugin
     * @desc Returns the parent accessibleMegaMenu instance for a given element
     * @param {jQuery} element
     * @memberof jQuery.fn.accessibleMegaMenu
     * @inner
     * @private
     */
    _getPlugin = function _getPlugin(element) {
      return $(element).closest(':data(plugin_' + pluginName + ')').data('plugin_' + pluginName);
    };

    /**
     * @name jQuery.fn.accessibleMegaMenu~_addUniqueId
     * @desc Adds a unique id and element.
     * The id string starts with the
     * string defined in settings.uuidPrefix.
     * @param {jQuery} element
     * @memberof jQuery.fn.accessibleMegaMenu
     * @inner
     * @private
     */
    _addUniqueId = function _addUniqueId(element) {
      element = $(element);
      var settings = this.settings;
      if (!element.attr('id')) {
        element.attr('id', settings.uuidPrefix + '-' + new Date().getTime() + '-' + ++uuid);
      }
    };

    /**
     * @name jQuery.fn.accessibleMegaMenu~_togglePanel
     * @desc Toggle the display of mega menu panels in response to an event.
     * The optional boolean value 'hide' forces all panels to hide.
     * @param {event} event
     * @param {Boolean} [hide] Hide all mega menu panels when true
     * @memberof jQuery.fn.accessibleMegaMenu
     * @inner
     * @private
     */
    _togglePanel = function _togglePanel(event, hide) {
      var target = $(event.target),
          that = this,
          settings = this.settings,
          menu = this.menu,
          topli = target.closest('.' + settings.topNavItemClass),
          panel = target.hasClass(settings.panelClass) ? target : target.closest('.' + settings.panelClass),
          newfocus;

      _toggleExpandedEventHandlers.call(this, true);

      if (hide) {
        topli = menu.find('.' + settings.topNavItemClass + ' .' + settings.openClass + ':first').closest('.' + settings.topNavItemClass);
        if (!(topli.is(event.relatedTarget) || topli.has(event.relatedTarget).length > 0)) {
          if ((event.type === 'mouseout' || event.type === 'focusout') && topli.has(document.activeElement).length > 0) {
            return;
          }
          topli.find('[aria-expanded]').attr('aria-expanded', 'false').removeClass(settings.openClass).filter('.' + settings.panelClass).attr('aria-hidden', 'true');
          if (event.type === 'keydown' && event.keyCode === Keyboard.ESCAPE || event.type === 'DOMAttrModified') {
            newfocus = topli.find(':tabbable:first');
            setTimeout(function () {
              menu.find('[aria-expanded].' + that.settings.panelClass).off('DOMAttrModified.accessible-megamenu');
              newfocus.focus();
              that.justFocused = false;
            }, 99);
          }
        } else if (topli.length === 0) {
          menu.find('[aria-expanded=true]').attr('aria-expanded', 'false').removeClass(settings.openClass).filter('.' + settings.panelClass).attr('aria-hidden', 'true');
        }
      } else {
        clearTimeout(that.focusTimeoutID);
        topli.siblings().find('[aria-expanded]').attr('aria-expanded', 'false').removeClass(settings.openClass).filter('.' + settings.panelClass).attr('aria-hidden', 'true');
        topli.find('[aria-expanded]').attr('aria-expanded', 'true').addClass(settings.openClass).filter('.' + settings.panelClass).attr('aria-hidden', 'false');
        if (event.type === 'mouseover' && target.is(':tabbable') && topli.length === 1 && panel.length === 0 && menu.has(document.activeElement).length > 0) {
          target.focus();
          that.justFocused = false;
        }

        _toggleExpandedEventHandlers.call(that);
      }
    };

    /**
     * @name jQuery.fn.accessibleMegaMenu~_clickHandler
     * @desc Handle click event on mega menu item
     * @param {event} Event object
     * @memberof jQuery.fn.accessibleMegaMenu
     * @inner
     * @private
     */
    _clickHandler = function _clickHandler(event) {
      var target = $(event.currentTarget),
          topli = target.closest('.' + this.settings.topNavItemClass),
          panel = target.closest('.' + this.settings.panelClass);
      if (topli.length === 1 && panel.length === 0 && topli.find('.' + this.settings.panelClass).length === 1) {
        if (!target.hasClass(this.settings.openClass)) {
          event.preventDefault();
          event.stopPropagation();
          _togglePanel.call(this, event);
          this.justFocused = false;
        } else {
          if (this.justFocused) {
            event.preventDefault();
            event.stopPropagation();
            this.justFocused = false;
          } else if (isTouch || this.mouseFocused) {
            event.preventDefault();
            event.stopPropagation();
            _togglePanel.call(this, event, target.hasClass(this.settings.openClass));
          }
        }
      }
    };

    /**
     * @name jQuery.fn.accessibleMegaMenu~_clickOutsideHandler
     * @desc Handle click event outside of a the megamenu
     * @param {event} Event object
     * @memberof jQuery.fn.accessibleMegaMenu
     * @inner
     * @private
     */
    _clickOutsideHandler = function _clickOutsideHandler(event) {
      if ($(event.target).closest(this.menu).length === 0) {
        event.preventDefault();
        event.stopPropagation();
        _togglePanel.call(this, event, true);
      }
    };

    /**
     * @name jQuery.fn.accessibleMegaMenu~_DOMAttrModifiedHandler
     * @desc Handle DOMAttrModified event on panel to respond to Windows 8 Narrator ExpandCollapse pattern
     * @param {event} Event object
     * @memberof jQuery.fn.accessibleMegaMenu
     * @inner
     * @private
     */
    _DOMAttrModifiedHandler = function _DOMAttrModifiedHandler(event) {
      if (event.originalEvent.attrName === 'aria-expanded' && event.originalEvent.newValue === 'false' && $(event.target).hasClass(this.settings.openClass)) {
        event.preventDefault();
        event.stopPropagation();
        _togglePanel.call(this, event, true);
      }
    };

    /**
     * @name jQuery.fn.accessibleMegaMenu~_focusInHandler
     * @desc Handle focusin event on mega menu item.
     * @param {event} Event object
     * @memberof jQuery.fn.accessibleMegaMenu
     * @inner
     * @private
     */
    _focusInHandler = function _focusInHandler(event) {
      clearTimeout(this.focusTimeoutID);
      var target = $(event.target),
          panel = target.closest('.' + this.settings.panelClass);
      target.addClass(this.settings.focusClass).on('click.accessible-megamenu', $.proxy(_clickHandler, this));
      this.justFocused = !this.mouseFocused;
      this.mouseFocused = false;
      if (this.panels.not(panel).filter('.' + this.settings.openClass).length) {
        _togglePanel.call(this, event);
      }
    };

    /**
     * @name jQuery.fn.accessibleMegaMenu~_focusOutHandler
     * @desc Handle focusout event on mega menu item.
     * @param {event} Event object
     * @memberof jQuery.fn.accessibleMegaMenu
     * @inner
     * @private
     */
    _focusOutHandler = function _focusOutHandler(event) {
      this.justFocused = false;
      var that = this,
          target = $(event.target),
          topli = target.closest('.' + this.settings.topNavItemClass);

      target
      // .removeClass(this.settings.focusClass)
      .off('click.accessible-megamenu');

      if (window.cvox) {
        // If ChromeVox is running...
        that.focusTimeoutID = setTimeout(function () {
          window.cvox.Api.getCurrentNode(function (node) {
            if (topli.has(node).length) {
              // and the current node being voiced is in
              // the mega menu, clearTimeout,
              // so the panel stays open.
              clearTimeout(that.focusTimeoutID);
            } else {
              that.focusTimeoutID = setTimeout(function (scope, _event, hide) {
                _togglePanel.call(scope, _event, hide);
              }, 275, that, event, true);
            }
          });
        }, 25);
      } else {
        that.focusTimeoutID = setTimeout(function () {
          _togglePanel.call(that, event, true);
        }, 300);
      }
    };

    /**
     * @name jQuery.fn.accessibleMegaMenu~_keyDownHandler
     * @desc Handle keydown event on mega menu.
     * @param {event} Event object
     * @memberof jQuery.fn.accessibleMegaMenu
     * @inner
     * @private
     */
    _keyDownHandler = function _keyDownHandler(event) {
      var that = this.constructor === AccessibleMegaMenu ? this : _getPlugin(this),
          // determine the AccessibleMegaMenu plugin instance
      settings = that.settings,
          target = $($(this).is('.' + settings.hoverClass + ':tabbable') ? this : event.target),
          // if the element is hovered the target is this, otherwise, its the focused element
      menu = that.menu,
          topnavitems = that.topnavitems,
          topli = target.closest('.' + settings.topNavItemClass),
          tabbables = menu.find(':tabbable'),
          panel = target.hasClass(settings.panelClass) ? target : target.closest('.' + settings.panelClass),
          panelGroups = panel.find('.' + settings.panelGroupClass),
          currentPanelGroup = target.closest('.' + settings.panelGroupClass),
          next,
          keycode = event.keyCode || event.which,
          start,
          i,
          o,
          label,
          found = false,
          newString = Keyboard.keyMap[event.keyCode] || '',
          regex,
          isTopNavItem = topli.length === 1 && panel.length === 0;

      if (target.is('input:focus, select:focus, textarea:focus, button:focus')) {
        // if the event target is a form element we should handle keydown normally
        return;
      }

      if (target.is('.' + settings.hoverClass + ':tabbable')) {
        $('html').off('keydown.accessible-megamenu');
      }

      switch (keycode) {
        case Keyboard.ESCAPE:
          _togglePanel.call(that, event, true);
          break;
        case Keyboard.DOWN:
          event.preventDefault();
          if (isTopNavItem) {
            _togglePanel.call(that, event);
            found = topli.find('.' + settings.panelClass + ' :tabbable:first').focus().length === 1;
          } else {
            found = tabbables.filter(':gt(' + tabbables.index(target) + '):first').focus().length === 1;
          }

          if (!found && window.opera && opera.toString() === '[object Opera]' && (event.ctrlKey || event.metaKey)) {
            tabbables = $(':tabbable');
            i = tabbables.index(target);
            found = $(':tabbable:gt(' + $(':tabbable').index(target) + '):first').focus().length === 1;
          }
          break;
        case Keyboard.UP:
          event.preventDefault();
          if (isTopNavItem && target.hasClass(settings.openClass)) {
            _togglePanel.call(that, event, true);
            next = topnavitems.filter(':lt(' + topnavitems.index(topli) + '):last');
            if (next.children('.' + settings.panelClass).length) {
              found = next.children().attr('aria-expanded', 'true').addClass(settings.openClass).filter('.' + settings.panelClass).attr('aria-hidden', 'false').find(':tabbable:last').focus() === 1;
            }
          } else if (!isTopNavItem) {
            found = tabbables.filter(':lt(' + tabbables.index(target) + '):last').focus().length === 1;
          }

          if (!found && window.opera && opera.toString() === '[object Opera]' && (event.ctrlKey || event.metaKey)) {
            tabbables = $(':tabbable');
            i = tabbables.index(target);
            found = $(':tabbable:lt(' + $(':tabbable').index(target) + '):first').focus().length === 1;
          }
          break;
        case Keyboard.RIGHT:
          event.preventDefault();
          if (isTopNavItem) {
            found = topnavitems.filter(':gt(' + topnavitems.index(topli) + '):first').find(':tabbable:first').focus().length === 1;
          } else {
            if (panelGroups.length && currentPanelGroup.length) {
              // if the current panel contains panel groups, and we are able to focus the first tabbable element of the next panel group
              found = panelGroups.filter(':gt(' + panelGroups.index(currentPanelGroup) + '):first').find(':tabbable:first').focus().length === 1;
            }

            if (!found) {
              found = topli.find(':tabbable:first').focus().length === 1;
            }
          }
          break;
        case Keyboard.LEFT:
          event.preventDefault();
          if (isTopNavItem) {
            found = topnavitems.filter(':lt(' + topnavitems.index(topli) + '):last').find(':tabbable:first').focus().length === 1;
          } else {
            if (panelGroups.length && currentPanelGroup.length) {
              // if the current panel contains panel groups, and we are able to focus the first tabbable element of the previous panel group
              found = panelGroups.filter(':lt(' + panelGroups.index(currentPanelGroup) + '):last').find(':tabbable:first').focus().length === 1;
            }

            if (!found) {
              found = topli.find(':tabbable:first').focus().length === 1;
            }
          }
          break;
        case Keyboard.TAB:
          i = tabbables.index(target);
          if (event.shiftKey && isTopNavItem && target.hasClass(settings.openClass)) {
            _togglePanel.call(that, event, true);
            next = topnavitems.filter(':lt(' + topnavitems.index(topli) + '):last');
            if (next.children('.' + settings.panelClass).length) {
              found = next.children().attr('aria-expanded', 'true').addClass(settings.openClass).filter('.' + settings.panelClass).attr('aria-hidden', 'false').find(':tabbable:last').focus();
            }
          } else if (event.shiftKey && i > 0) {
            found = tabbables.filter(':lt(' + i + '):last').focus().length === 1;
          } else if (!event.shiftKey && i < tabbables.length - 1) {
            found = tabbables.filter(':gt(' + i + '):first').focus().length === 1;
          } else if (window.opera && opera.toString() === '[object Opera]') {
            tabbables = $(':tabbable');
            i = tabbables.index(target);
            if (event.shiftKey) {
              found = $(':tabbable:lt(' + $(':tabbable').index(target) + '):last').focus().length === 1;
            } else {
              found = $(':tabbable:gt(' + $(':tabbable').index(target) + '):first').focus().length === 1;
            }
          }

          if (found) {
            event.preventDefault();
          }
          break;
        case Keyboard.SPACE:
          if (isTopNavItem) {
            event.preventDefault();
            _clickHandler.call(that, event);
          } else {
            return;
          }
          break;
        case Keyboard.ENTER:
          return;
          break;
        default:
          // alphanumeric filter
          clearTimeout(this.keydownTimeoutID);

          keydownSearchString += newString !== keydownSearchString ? newString : '';

          if (keydownSearchString.length === 0) {
            return;
          }

          this.keydownTimeoutID = setTimeout(function () {
            keydownSearchString = '';
          }, keydownTimeoutDuration);

          if (isTopNavItem && !target.hasClass(settings.openClass)) {
            tabbables = tabbables.filter(':not(.' + settings.panelClass + ' :tabbable)');
          } else {
            tabbables = topli.find(':tabbable');
          }

          if (event.shiftKey) {
            tabbables = $(tabbables.get().reverse());
          }

          for (i = 0; i < tabbables.length; i++) {
            o = tabbables.eq(i);
            if (o.is(target)) {
              start = keydownSearchString.length === 1 ? i + 1 : i;
              break;
            }
          }

          regex = new RegExp('^' + keydownSearchString.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&'), 'i');

          for (i = start; i < tabbables.length; i++) {
            o = tabbables.eq(i);
            label = $.trim(o.text());
            if (regex.test(label)) {
              found = true;
              o.focus();
              break;
            }
          }
          if (!found) {
            for (i = 0; i < start; i++) {
              o = tabbables.eq(i);
              label = $.trim(o.text());
              if (regex.test(label)) {
                o.focus();
                break;
              }
            }
          }
          break;
      }
      that.justFocused = false;
    };

    /**
     * @name jQuery.fn.accessibleMegaMenu~_mouseDownHandler
     * @desc Handle mousedown event on mega menu.
     * @param {event} Event object
     * @memberof accessibleMegaMenu
     * @inner
     * @private
     */
    _mouseDownHandler = function _mouseDownHandler(event) {
      if ($(event.target).is(this.settings.panelClass) || $(event.target).closest(':focusable').length) {
        this.mouseFocused = true;
      }
      this.mouseTimeoutID = setTimeout(function () {
        clearTimeout(this.focusTimeoutID);
      }, 1);
    };

    /**
     * @name jQuery.fn.accessibleMegaMenu~_mouseOverHandler
     * @desc Handle mouseover event on mega menu.
     * @param {event} Event object
     * @memberof jQuery.fn.accessibleMegaMenu
     * @inner
     * @private
     */
    _mouseOverHandler = function _mouseOverHandler(event) {
      clearTimeout(this.mouseTimeoutID);
      $(event.target).addClass(this.settings.hoverClass);
      _togglePanel.call(this, event);
      if ($(event.target).is(':tabbable')) {
        $('html').on('keydown.accessible-megamenu', $.proxy(_keyDownHandler, event.target));
      }
    };

    /**
     * @name jQuery.fn.accessibleMegaMenu~_mouseOutHandler
     * @desc Handle mouseout event on mega menu.
     * @param {event} Event object
     * @memberof jQuery.fn.accessibleMegaMenu
     * @inner
     * @private
     */
    _mouseOutHandler = function _mouseOutHandler(event) {
      var that = this;
      $(event.target).removeClass(that.settings.hoverClass);

      that.mouseTimeoutID = setTimeout(function () {
        _togglePanel.call(that, event, true);
      }, 250);
      if ($(event.target).is(':tabbable')) {
        $('html').off('keydown.accessible-megamenu');
      }
    };

    _toggleExpandedEventHandlers = function _toggleExpandedEventHandlers(hide) {
      var menu = this.menu;
      if (hide) {
        $('html').off('mouseup.outside-accessible-megamenu, touchend.outside-accessible-megamenu, mspointerup.outside-accessible-megamenu,  pointerup.outside-accessible-megamenu');

        menu.find('[aria-expanded].' + this.settings.panelClass).off('DOMAttrModified.accessible-megamenu');
      } else {
        $('html').on('mouseup.outside-accessible-megamenu, touchend.outside-accessible-megamenu, mspointerup.outside-accessible-megamenu,  pointerup.outside-accessible-megamenu', $.proxy(_clickOutsideHandler, this));

        /* Narrator in Windows 8 automatically toggles the aria-expanded property on double tap or click.
           To respond to the change to collapse the panel, we must add a listener for a DOMAttrModified event. */
        menu.find('[aria-expanded=true].' + this.settings.panelClass).on('DOMAttrModified.accessible-megamenu', $.proxy(_DOMAttrModifiedHandler, this));
      }
    };

    /* public attributes and methods ------------------------- */
    return {
      constructor: AccessibleMegaMenu,

      /**
       * @lends jQuery.fn.accessibleMegaMenu
       * @desc Initializes an instance of the accessibleMegaMenu plugins
       * @memberof jQuery.fn.accessibleMegaMenu
       * @instance
       */
      init: function init() {
        var settings = this.settings,
            nav = $(this.element),
            menu = nav.children().first(),

        // Only filter to those items with the selector class
        topnavitems = this.settings.topNavItems ? menu.children(this.settings.topNavItems) : menu.children();
        this.start(settings, nav, menu, topnavitems);
      },

      start: function start(settings, nav, menu, topnavitems) {
        var that = this;
        this.settings = settings;
        this.menu = menu;
        this.topnavitems = topnavitems;

        nav.attr('role', 'navigation');
        menu.addClass(settings.menuClass);
        topnavitems.each(function (i, topnavitem) {
          var topnavitemlink, topnavitempanel;
          topnavitem = $(topnavitem);
          // @FIXME: Add classed manually !!!
          // topnavitem.addClass(settings.topNavItemClass)
          topnavitemlink = topnavitem.find(':tabbable:first');
          topnavitempanel = topnavitem.children(':not(:tabbable):last');
          _addUniqueId.call(that, topnavitemlink);
          if (topnavitempanel.length) {
            _addUniqueId.call(that, topnavitempanel);
            topnavitemlink.attr({
              'aria-haspopup': true,
              'aria-controls': topnavitempanel.attr('id'),
              'aria-expanded': false
            });

            topnavitempanel.attr({
              'role': 'group',
              'aria-expanded': false,
              'aria-hidden': true
            }).addClass(settings.panelClass).not('[aria-labelledby]').attr('aria-labelledby', topnavitemlink.attr('id'));
          }
        });

        this.panels = menu.find('.' + settings.panelClass);

        menu.on('focusin.accessible-megamenu', ':focusable, .' + settings.panelClass, $.proxy(_focusInHandler, this)).on('focusout.accessible-megamenu', ':focusable, .' + settings.panelClass, $.proxy(_focusOutHandler, this)).on('keydown.accessible-megamenu', $.proxy(_keyDownHandler, this)).on('mousedown.accessible-megamenu', $.proxy(_mouseDownHandler, this));

        if (!settings.openOnClick) {
          menu.on('mouseover.accessible-megamenu', $.proxy(_mouseOverHandler, this)).on('mouseout.accessible-megamenu', $.proxy(_mouseOutHandler, this));
        } else {
          menu.on('click.accessible-megamenu', $.proxy(_mouseOverHandler, this));
        }

        if (isTouch) {
          menu.on('touchstart.accessible-megamenu', $.proxy(_clickHandler, this));
        }

        menu.find('hr').attr('role', 'separator');

        if ($(document.activeElement).closest(menu).length) {
          $(document.activeElement).trigger('focusin.accessible-megamenu');
        }
      },

      /**
       * @desc Get default values
       * @example $(selector).accessibleMegaMenu('getDefaults')
       * @return {object}
       * @memberof jQuery.fn.accessibleMegaMenu
       * @instance
       */
      getDefaults: function getDefaults() {
        return this._defaults;
      },

      /**
       * @desc Get any option set to plugin using its name (as string)
       * @example $(selector).accessibleMegaMenu('getOption', some_option)
       * @param {string} opt
       * @return {string}
       * @memberof jQuery.fn.accessibleMegaMenu
       * @instance
       */
      getOption: function getOption(opt) {
        return this.settings[opt];
      },

      /**
       * @desc Get all options
       * @example $(selector).accessibleMegaMenu('getAllOptions')
       * @return {object}
       * @memberof jQuery.fn.accessibleMegaMenu
       * @instance
       */
      getAllOptions: function getAllOptions() {
        return this.settings;
      },

      /**
       * @desc Set option
       * @example $(selector).accessibleMegaMenu('setOption', 'option_name',  'option_value',  reinitialize)
       * @param {string} opt - Option name
       * @param {string} val - Option value
       * @param {boolean} [reinitialize] - boolean to re-initialize the menu.
       * @memberof jQuery.fn.accessibleMegaMenu
       * @instance
       */
      setOption: function setOption(opt, value, reinitialize) {
        this.settings[opt] = value;
        if (reinitialize) {
          this.init();
        }
      }
    };
  }();

  /*
   * @param {object} [options] Mega Menu options
   * @param {string} [options.uuidPrefix=accessible-megamenu] - Prefix for generated unique id attributes, which are required to indicate aria-owns, aria-controls and aria-labelledby
   * @param {string} [options.menuClass=accessible-megamenu] - CSS class used to define the megamenu styling
   * @param {string} [options.topNavItemClass=accessible-megamenu-top-nav-item] - CSS class for a top-level navigation item in the megamenu
   * @param {string} [options.panelClass=accessible-megamenu-panel] - CSS class for a megamenu panel
   * @param {string} [options.panelGroupClass=accessible-megamenu-panel-group] - CSS class for a group of items within a megamenu panel
   * @param {string} [options.hoverClass=hover] - CSS class for the hover state
   * @param {string} [options.focusClass=focus] - CSS class for the focus state
   * @param {string} [options.openClass=open] - CSS class for the open state
   */
  $.fn[pluginName] = function (options) {
    return this.each(function () {
      if (!$.data(this, 'plugin_' + pluginName)) {
        $.data(this, 'plugin_' + pluginName, new $.fn[pluginName].AccessibleMegaMenu(this, options));
      }
    });
  };

  $.fn[pluginName].AccessibleMegaMenu = AccessibleMegaMenu;

  /* :focusable and :tabbable selectors from
     https://raw.github.com/jquery/jquery-ui/master/ui/jquery.ui.core.js */

  /**
   * @private
   */
  function visible(element) {
    return $.expr.filters.visible(element) && !$(element).parents().addBack().filter(function () {
      return $.css(this, 'visibility') === 'hidden';
    }).length;
  }

  /**
   * @private
   */
  function _focusable(element, isTabIndexNotNaN) {
    var map,
        mapName,
        img,
        nodeName = element.nodeName.toLowerCase();
    if ('area' === nodeName) {
      map = element.parentNode;
      mapName = map.name;
      if (!element.href || !mapName || map.nodeName.toLowerCase() !== 'map') {
        return false;
      }
      img = $('img[usemap=#' + mapName + ']')[0];
      return !!img && visible(img);
    }
    return (/input|select|textarea|button|object/.test(nodeName) ? !element.disabled : 'a' === nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) &&
    // the element and all of its ancestors must be visible
    visible(element);
  }

  $.extend($.expr[':'], {
    data: $.expr.createPseudo ? $.expr.createPseudo(function (dataName) {
      return function (elem) {
        return !!$.data(elem, dataName);
      };
    }) : // support: jQuery <1.8
    function (elem, i, match) {
      return !!$.data(elem, match[3]);
    },

    focusable: function focusable(element) {
      return _focusable(element, !isNaN($.attr(element, 'tabindex')));
    },

    tabbable: function tabbable(element) {
      var tabIndex = $.attr(element, 'tabindex'),
          isTabIndexNaN = isNaN(tabIndex);
      return (isTabIndexNaN || tabIndex >= 0) && _focusable(element, !isTabIndexNaN);
    }
  });
})(jQuery, window, document);

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jquery = __webpack_require__(0);

var _jquery2 = _interopRequireDefault(_jquery);

var _offcanvas = __webpack_require__(22);

var _offcanvas2 = _interopRequireDefault(_offcanvas);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var opts = {
  // String - panel
  panelSelector: '.Offcanvas',

  // String - content
  contentSelector: '.Offcanvas-content',

  // String - content
  modalSelector: '.Offcanvas--modal',

  // String - trigger
  jsSelector: '.js-fr-offcanvas-open',

  // String - Selector for the open button(s)
  openSelector: '.js-fr-offcanvas-open',

  // String - Selector for the close button
  closeSelector: '.js-fr-offcanvas-close',

  // String - Class name that will be added to the selector when the component has been initialised
  readyClass: 'is-ready',

  // String - Class name that will be added to the selector when the panel is visible
  activeClass: 'is-active'

  /*
   *  Prevent scroll on body when offcanvas is visible
   *  (the touchmove handler targets iOS devices)
   */
};var _handleModalScroll = function _handleModalScroll() {
  (0, _jquery2['default'])(opts.contentSelector).on('transitionend', function () {
    if (!(0, _jquery2['default'])(opts.panelSelector).hasClass(opts.activeClass)) {
      (0, _jquery2['default'])(window).off('scroll.offcanvas');
      (0, _jquery2['default'])(document).off('touchmove.offcanvas');
    } else {
      var _scrollTop = (0, _jquery2['default'])(window).scrollTop();
      (0, _jquery2['default'])(window).on('scroll.offcanvas', function () {
        return (0, _jquery2['default'])(window).scrollTop(_scrollTop);
      });
      (0, _jquery2['default'])(document).on('touchmove.offcanvas', function () {
        return (0, _jquery2['default'])(window).scrollTop(_scrollTop);
      });
    }
  });
};

/*
 *	FIXME: hack to show / hide the background panel
 */
var _handleModal = function _handleModal(e) {
  if (e && (0, _jquery2['default'])(opts.panelSelector).hasClass(opts.activeClass) && !(0, _jquery2['default'])(e.target).is(opts.contentSelector)) {
    // for some odd reason plain jquery click() does not work here
    // // so we add that get(0) call
    (0, _jquery2['default'])(e.target).find(opts.closeSelector).get(0).click();
  }
  // we're using "one" here instead of "bind" because
  // otherwise $(opts.closeSelector).click() would trigger
  // a click on modal again looping forever
  (0, _jquery2['default'])(opts.modalSelector).one('click', _handleModal);
};

var _exports = {
  Froffcanvas: _offcanvas2['default'],
  opts: opts
};

(0, _jquery2['default'])(document).ready(function () {
  var _scrollTop = (0, _jquery2['default'])(window).scrollTop();

  (0, _jquery2['default'])(opts.openSelector).add((0, _jquery2['default'])(opts.closeSelector)).click(function (e) {
    _scrollTop = (0, _jquery2['default'])(window).scrollTop();
    e.preventDefault();
  });

  (0, _jquery2['default'])(opts.panelSelector).on('focus', function () {
    (0, _jquery2['default'])(window).scrollTop(_scrollTop);
  });

  _handleModal();
  _handleModalScroll();

  _exports.offcanvas = (0, _offcanvas2['default'])(opts);
});

exports['default'] = _exports;
module.exports = exports['default'];

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Polyfill matches as per https://github.com/jonathantneal/closest

Object.defineProperty(exports, "__esModule", {
  value: true
});
Element.prototype.matches = Element.prototype.matches || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector;

/**
 * @param {object} options Object containing configuration overrides
 */
var Froffcanvas = function Froffcanvas() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$selector = _ref.selector,
      selector = _ref$selector === undefined ? '.js-fr-offcanvas' : _ref$selector,
      _ref$openSelector = _ref.openSelector,
      openSelector = _ref$openSelector === undefined ? '.js-fr-offcanvas-open' : _ref$openSelector,
      _ref$closeSelector = _ref.closeSelector,
      closeSelector = _ref$closeSelector === undefined ? '.js-fr-offcanvas-close' : _ref$closeSelector,
      _ref$readyClass = _ref.readyClass,
      readyClass = _ref$readyClass === undefined ? 'fr-offcanvas--is-ready' : _ref$readyClass,
      _ref$activeClass = _ref.activeClass,
      activeClass = _ref$activeClass === undefined ? 'fr-offcanvas--is-active' : _ref$activeClass;

  //  CONSTANTS
  var doc = document;
  var docEl = doc.documentElement;
  var _q = function _q(el) {
    var ctx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : doc;
    return [].slice.call(ctx.querySelectorAll(el));
  };

  //  SUPPORTS
  if (!('querySelector' in doc) || !('addEventListener' in window) || !docEl.classList) return;

  //  SETUP
  // set offcanvas element NodeLists
  var panels = _q(selector);

  //  TEMP
  var currButtonOpen = null;
  var currPanel = null;

  //  UTILS
  function _defer(fn) {
    //  wrapped in setTimeout to delay binding until previous rendering has completed
    if (typeof fn === 'function') setTimeout(fn, 0);
  }
  function _closest(el, selector) {
    while (el) {
      if (el.matches(selector)) break;
      el = el.parentElement;
    }
    return el;
  }
  function _getPanelId(panel) {
    return panel.getAttribute('id');
  }

  //  A11Y
  function _addA11y(panel) {
    //  add aria-hidden attribute
    panel.setAttribute('aria-hidden', true);
  }
  function _removeA11y(panel) {
    //  remove aria-hidden attribute
    panel.removeAttribute('aria-hidden');
  }

  //  ACTIONS
  function _showPanel(panel) {
    //  set visibility to override any previous set style
    panel.style.visibility = 'visible';
    //  remove aria-hidden, add focus
    panel.setAttribute('aria-hidden', false);
    panel.setAttribute('tabindex', -1);
    panel.focus();
    //  sort out events
    _defer(_unbindOpenPointer);
    _defer(_bindDocKey);
    _defer(_bindDocClick);
    _defer(_bindClosePointer);
    //  reset scroll position
    panel.scrollTop = 0;
    //  add active class
    panel.classList.add(activeClass);
  }
  function _hidePanel() {
    var panel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : currPanel;
    var returnfocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    //  add aria-hidden, remove focus
    panel.setAttribute('aria-hidden', true);
    panel.removeAttribute('tabindex');
    panel.blur();
    //  set visibility to override any previous set style
    panel.style.visibility = 'hidden';
    //  sort out events
    _unbindClosePointer(panel);
    _unbindDocKey();
    _unbindDocClick();
    _bindOpenPointer(panel);
    //  remove active class
    panel.classList.remove(activeClass);
    //  return focus to button that opened the panel and reset the reference
    if (returnfocus) {
      currButtonOpen.focus();
      currButtonOpen = null;
    }
  }
  function destroy() {
    panels.forEach(function (panel) {
      //  remove attributes
      _removeA11y(panel);
      //  unbind local events
      _unbindOpenPointer(panel);
      _unbindClosePointer(panel);
      //  remove class
      panel.classList.remove(readyClass);
      panel.classList.remove(activeClass);
      panel.style.visibility = '';
    });
    //  unbind global events
    _unbindDocClick();
    _unbindDocKey();
    //  reset temp references
    currButtonOpen = null;
    currPanel = null;
  }

  //  EVENTS
  function _eventOpenPointer(e) {
    //  get panel
    var panelId = e.currentTarget.getAttribute('aria-controls');
    var panel = doc.getElementById(panelId);
    //  hide any open panels
    if (currPanel) _hidePanel(currPanel, false);
    //  save temp panel/button
    currButtonOpen = e.currentTarget;
    currPanel = panel;
    //  show
    _showPanel(panel);
  }
  function _eventClosePointer() {
    _hidePanel();
  }
  function _eventDocClick(e) {
    //  check if target is panel or child of
    var isPanel = e.target === currPanel;
    var isPanelChild = _closest(e.target, selector);
    if (!isPanel && !isPanelChild) _hidePanel();
  }
  function _eventDocKey(e) {
    //  esc key
    if (e.keyCode === 27) _hidePanel();
  }

  //  BIND EVENTS
  function _bindOpenPointer(panel) {
    var openButtons = _q(openSelector + '[aria-controls="' + _getPanelId(panel) + '"]'); // is this selector totally crazy?
    openButtons.forEach(function (button) {
      return button.addEventListener('click', _eventOpenPointer);
    });
  }
  function _bindClosePointer() {
    var panel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : currPanel;

    var closeButton = _q(closeSelector, panel)[0];
    closeButton.addEventListener('click', _eventClosePointer);
  }
  function _bindDocClick() {
    doc.addEventListener('click', _eventDocClick);
  }
  function _bindDocKey() {
    doc.addEventListener('keydown', _eventDocKey);
  }

  //  UNBIND EVENTS
  function _unbindOpenPointer() {
    var panel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : currPanel;

    var openButtons = _q(openSelector + '[aria-controls="' + _getPanelId(panel) + '"]'); // yep its totally crazy
    openButtons.forEach(function (button) {
      return button.removeEventListener('click', _eventOpenPointer);
    });
  }
  function _unbindClosePointer() {
    var panel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : currPanel;

    var closeButton = _q(closeSelector, panel)[0];
    closeButton.removeEventListener('click', _eventClosePointer);
  }
  function _unbindDocClick() {
    doc.removeEventListener('click', _eventDocClick);
  }
  function _unbindDocKey() {
    doc.removeEventListener('keydown', _eventDocKey);
  }

  //  INIT
  function init() {
    if (!panels) return;
    //  loop through each offcanvas element
    panels.forEach(function (panel) {
      _addA11y(panel);
      _bindOpenPointer(panel);
      panel.classList.add(readyClass);
    });
  }
  init();

  // REVEAL API
  return {
    init: init,
    destroy: destroy
  };
};

// module exports
exports['default'] = Froffcanvas;
module.exports = exports['default'];

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _jquery = __webpack_require__(0);

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/*
 *  Randomize order of children in container (.js-randomize)
 */
(0, _jquery2['default'])(function () {
  var CONTAINER_SELECTOR = '.js-randomize';
  var EXCLUDE_SELECTOR = '.js-randomize-exclude';

  function shuffle(o) {
    for (var j, x, i = o.length; i; j = parseInt(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x) {}
    return o;
  }

  (0, _jquery2['default'])(CONTAINER_SELECTOR).each(function (i, container) {
    var $container = (0, _jquery2['default'])(container);
    $container.html(shuffle($container.children().not(EXCLUDE_SELECTOR).get()));
  });
});

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jquery = __webpack_require__(0);

var _jquery2 = _interopRequireDefault(_jquery);

var _throttle = __webpack_require__(3);

var _throttle2 = _interopRequireDefault(_throttle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var threshold = 100;

var _toggleScrolltop = function _toggleScrolltop() {
  (0, _jquery2['default'])(window).scrollTop() > threshold ? (0, _jquery2['default'])('.js-scrollTop').show() : (0, _jquery2['default'])('.js-scrollTop').hide();
};

(0, _jquery2['default'])(window).scroll((0, _throttle2['default'])(500, _toggleScrolltop));
(0, _jquery2['default'])(document).ready(_toggleScrolltop);

exports['default'] = {
  threshold: threshold
};
module.exports = exports['default'];

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _frBypasslinks = __webpack_require__(26);

var _frBypasslinks2 = _interopRequireDefault(_frBypasslinks);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var bypassLinks = (0, _frBypasslinks2['default'])({
  selector: '.js-fr-bypasslinks'
});

exports['default'] = { bypassLinks: bypassLinks, Frbypasslinks: _frBypasslinks2['default'] };
module.exports = exports['default'];

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * @param {object} options Object containing configuration overrides
 */

Object.defineProperty(exports, "__esModule", {
	value: true
});
var Frbypasslinks = function Frbypasslinks() {
	var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	    _ref$selector = _ref.selector,
	    selector = _ref$selector === undefined ? '.js-fr-bypasslinks' : _ref$selector;

	//	CONSTANTS
	var doc = document;
	var _q = function _q(el) {
		var ctx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : doc;
		return [].slice.call(ctx.querySelectorAll(el));
	};

	//	SUPPORTS
	if (!('querySelector' in doc) || !('addEventListener' in window)) return;

	//	SETUP
	// get bypass links NodeList
	var container = _q(selector)[0];

	//	TEMP
	var currTarget = null;

	//	ACTIONS
	function _addFocusability(link) {
		//	get target element
		var id = link.getAttribute('href').slice(1);
		var target = doc.getElementById(id);
		//	set tabindex to allow focus
		if (target) target.setAttribute('tabindex', -1);
	}
	function _removeFocusability(link) {
		//	get target element
		var id = link.getAttribute('href').slice(1);
		var target = doc.getElementById(id);
		//	remove ability to focus (stops user highlighting element on click)
		if (target) target.removeAttribute('tabindex');
	}
	function destroy() {
		//	loop through each bypass link and remove event bindings
		_q('a', container).forEach(function (link) {
			_unbindPointerClick(link);
			_addFocusability(link);
		});
		if (currTarget) _unbindTargetBlur(currTarget);
	}

	//	EVENTS
	function _eventPointerClick(e) {
		//	get target element
		var id = e.target.getAttribute('href').slice(1);
		var target = doc.getElementById(id);

		// don't try to apply relevant atts/focus if target isn't present
		if (!target) return;
		//	set tabindex to allow focus
		target.setAttribute('tabindex', -1);
		target.focus();
		//	save target reference
		currTarget = target;
		//	bind blur event on target
		_bindTargetBlur(target);
	}
	function _eventTargetBlur(e) {
		//	remove ability to focus (stops user highlighting element on click)
		e.target.removeAttribute('tabindex');
		//	remove target reference
		currTarget = null;
		//	unbind blur event
		_unbindTargetBlur(e.target);
	}

	//	BIND EVENTS
	function _bindPointerClick(link) {
		//	bind interaction event
		link.addEventListener('click', _eventPointerClick);
	}
	function _bindTargetBlur(target) {
		//	bind blur event on target element
		target.addEventListener('blur', _eventTargetBlur);
	}

	//	UNBIND EVENTS
	function _unbindPointerClick(link) {
		//	unbind interaction event
		link.removeEventListener('click', _eventPointerClick);
	}
	function _unbindTargetBlur(target) {
		//	unbind blur event on target element
		target.removeEventListener('blur', _eventTargetBlur);
	}

	//	INIT
	function init() {
		//	detect if bypass links exist in the document
		if (!container) return;
		//	loop through each bypass link
		_q('a', container).forEach(function (link) {
			_bindPointerClick(link);
			_removeFocusability(link);
		});
	}
	init();

	// REVEAL API
	return {
		init: init,
		destroy: destroy
	};
};

// module exports
exports['default'] = Frbypasslinks;
module.exports = exports['default'];

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _jquery = __webpack_require__(0);

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var opts = {
  responsiveTableSelector: '.js-TableResponsive'
};

(0, _jquery2['default'])(document).ready(function () {
  if ((0, _jquery2['default'])(opts.responsiveTableSelector).length > 0) {
    __webpack_require__.e/* require */(2).then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(44), __webpack_require__(45)]; (function () {
      (0, _jquery2['default'])(document).trigger('enhance.tablesaw');
    }.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}).catch(__webpack_require__.oe);
  }
});

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jquery = __webpack_require__(0);

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/*
 *	TODO:
 *		- repack as a frend _component and CSS
 *		- refactor without jQuery
 */

/*
 * Porting of http://www.oaa-accessibility.org/examplep/treeview1/
 */
var Treeview = function Treeview() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$selector = _ref.selector,
      selector = _ref$selector === undefined ? '.js-Treeview' : _ref$selector,
      _ref$classFocused = _ref.classFocused,
      classFocused = _ref$classFocused === undefined ? 'hasFocus' : _ref$classFocused,
      _ref$classParent = _ref.classParent,
      classParent = _ref$classParent === undefined ? 'Treeview-parent' : _ref$classParent,
      _ref$classMenuHandler = _ref.classMenuHandler,
      classMenuHandler = _ref$classMenuHandler === undefined ? 'js-Treeview-handler' : _ref$classMenuHandler,
      _ref$styleMenuHandler = _ref.styleMenuHandler,
      styleMenuHandler = _ref$styleMenuHandler === undefined ? 'Treeview-handler--default' : _ref$styleMenuHandler,
      _ref$styleMenuHandler2 = _ref.styleMenuHandlerStandalone,
      styleMenuHandlerStandalone = _ref$styleMenuHandler2 === undefined ? 'Treeview-handler--standalone' : _ref$styleMenuHandler2,
      _ref$ariaLabelHandler = _ref.ariaLabelHandler,
      ariaLabelHandler = _ref$ariaLabelHandler === undefined ? 'expand' : _ref$ariaLabelHandler,
      _ref$multiselectable = _ref.multiselectable,
      multiselectable = _ref$multiselectable === undefined ? true : _ref$multiselectable,
      _ref$animationMs = _ref.animationMs,
      animationMs = _ref$animationMs === undefined ? 100 : _ref$animationMs;

  var keys = {
    tab: 9,
    enter: 13,
    space: 32,
    pageup: 33,
    pagedown: 34,
    end: 35,
    home: 36,
    left: 37,
    up: 38,
    right: 39,
    down: 40,
    asterisk: 106
  };

  function _collapseAll(treeview) {
    treeview.$parents.each(function () {
      if ((0, _jquery2['default'])(this).attr('aria-expanded') == 'false') {
        (0, _jquery2['default'])(this).children('ul').attr('aria-hidden', 'true');
      }
    });
    treeview.$visibleItems = treeview.$el.find('li:visible');
  }

  function _expandGroup(treeview, $item) {
    var $group = $item.children('ul');
    $group.slideDown(animationMs, function () {
      $group.attr('aria-hidden', 'false');
      $item.attr('aria-expanded', 'true');
      treeview.$visibleItems = treeview.$el.find('li:visible');
    });
  }

  function _collapseGroup(treeview, $item) {
    var $group = $item.children('ul');
    $group.slideUp(animationMs, function () {
      $group.attr('aria-hidden', 'true');
      $item.attr('aria-expanded', 'false');
      treeview.$visibleItems = treeview.$el.find('li:visible');
    });
  }

  function _collapseSiblings(treeview, $item) {
    $item.closest('ul').find('> .' + classParent).not($item).each(function (i, el) {
      _collapseGroup(treeview, (0, _jquery2['default'])(el));
    });
  }

  function _toggleGroup(treeview, $item) {
    if (!multiselectable) {
      _collapseSiblings(treeview, $item);
    }
    if ($item.attr('aria-expanded') == 'true') {
      _collapseGroup(treeview, $item);
    } else {
      _expandGroup(treeview, $item);
    }
  }

  function _updateStyling(treeview, $item) {
    treeview.$items.removeClass(classFocused);
    $item.addClass(classFocused);
  }

  function _handleKeyDown(treeview, $item, e) {
    var curNdx = treeview.$visibleItems.index($item);

    if (e.altKey || e.ctrlKey || e.shiftKey && e.keyCode != keys.tab) {
      return true;
    }

    // if (!$(e.currentTarget).is('.' + classMenuHandler)) {
    //   return true
    // }

    switch (e.keyCode) {
      case keys.tab:
        {
          treeview.$activeItem = null;
          $item.removeClass(classFocused);
          return true;
        }

      case keys.home:
        {
          treeview.$activeItem = treeview.$parents.first();
          treeview.$activeItem.find(':focusable:first').focus();
          e.stopPropagation();
          return false;
        }

      case keys.end:
        {
          treeview.$activeItem = treeview.$visibleItems.last();
          treeview.$activeItem.find(':focusable:first').focus();
          e.stopPropagation();
          return false;
        }

      case keys.enter:
      case keys.space:
        {
          if ((0, _jquery2['default'])(e.currentTarget).is('.' + classMenuHandler)) {
            _toggleGroup(treeview, $item);
            e.stopPropagation();
            return false;
          }
          return true;
        }

      case keys.left:
        {
          if ($item.is('.' + classParent) && $item.attr('aria-expanded') == 'true') {
            _collapseGroup(treeview, $item);
          } else {
            var $itemUL = $item.parent();
            var $itemParent = $itemUL.parent();
            treeview.$activeItem = $itemParent;
            treeview.$activeItem.find(':focusable:first').focus();
          }
          e.stopPropagation();
          return false;
        }

      case keys.right:
        {
          if (!$item.is('.' + classParent)) {
            // do nothing
          } else if ($item.attr('aria-expanded') == 'false') {
            _expandGroup(treeview, $item);
          } else {
            treeview.$activeItem = $item.children('ul').children('li').first();
            treeview.$activeItem.find(':focusable:first').focus();
          }
          e.stopPropagation();
          return false;
        }

      case keys.up:
        {
          if (curNdx > 0) {
            var $prev = treeview.$visibleItems.eq(curNdx - 1);
            treeview.$activeItem = $prev;
            $prev.find(':focusable:first').focus();
          }
          e.stopPropagation();
          return false;
        }

      case keys.down:
        {
          if (curNdx < treeview.$visibleItems.length - 1) {
            var $next = treeview.$visibleItems.eq(curNdx + 1);
            treeview.$activeItem = $next;
            $next.find(':focusable:first').focus();
          }
          e.stopPropagation();
          return false;
        }

      case keys.asterisk:
        {
          treeview.$parents.each(function () {
            _expandGroup(treeview, (0, _jquery2['default'])(this));
          });
          e.stopPropagation();
          return false;
        }

    }
    return true;
  }

  function _handleKeyPress(treeview, $item, e) {
    if (e.altKey || e.ctrlKey || e.shiftKey) {
      // do nothing
      return true;
    }

    switch (e.keyCode) {
      case keys.tab:
        {
          return true;
        }
      case keys.enter:
      case keys.home:
      case keys.end:
      case keys.left:
      case keys.right:
      case keys.up:
      case keys.down:
        {
          e.stopPropagation();
          return false;
        }
      default:
        {
          var chr = String.fromCharCode(e.which);
          var bMatch = false;
          var itemNdx = treeview.$visibleItems.index($item);
          var itemCnt = treeview.$visibleItems.length;
          var curNdx = itemNdx + 1;

          // check if the active item was the last one on the list
          if (curNdx == itemCnt) {
            curNdx = 0;
          }

          // Iterate through the menu items (starting from the current item and wrapping) until a match is found
          // or the loop returns to the current menu item
          while (curNdx != itemNdx) {

            var $curItem = treeview.$visibleItems.eq(curNdx);
            var titleChr = $curItem.text().charAt(0);

            if ($curItem.is('.' + classParent)) {
              titleChr = $curItem.find('span').text().charAt(0);
            }

            if (titleChr.toLowerCase() == chr) {
              bMatch = true;
              break;
            }

            curNdx = curNdx + 1;

            if (curNdx == itemCnt) {
              // reached the end of the list, start again at the beginning
              curNdx = 0;
            }
          }

          if (bMatch == true) {
            treeview.$activeItem = treeview.$visibleItems.eq(curNdx);
            treeview.$activeItem.find(':focusable:first').focus();
          }

          e.stopPropagation();
          return false;
        }
    }

    return true;
  }

  function _handleClick(treeview, $item, e) {
    if (e.altKey || e.ctrlKey || e.shiftKey) {
      // do nothing
      return true;
    }

    // closest('li')
    var $parent = $item.closest('li');

    treeview.$activeItem = $parent;
    _updateStyling(treeview, $parent);
    _toggleGroup(treeview, $parent);

    e.stopPropagation();
    return false;
  }

  function _bindEvents(treeview) {
    treeview.$handlers.click(function (e) {
      return _handleClick(treeview, (0, _jquery2['default'])(this), e);
    });

    treeview.$items.keydown(function (e) {
      return _handleKeyDown(treeview, (0, _jquery2['default'])(this), e);
    });

    treeview.$items.keypress(function (e) {
      return _handleKeyPress(treeview, (0, _jquery2['default'])(this), e);
    });

    treeview.$handlers.keydown(function (e) {
      return _handleKeyDown(treeview, (0, _jquery2['default'])(this).closest('li'), e);
    });

    treeview.$handlers.keypress(function (e) {
      return _handleKeyPress(treeview, (0, _jquery2['default'])(this).closest('li'), e);
    });

    (0, _jquery2['default'])(document).click(function () {
      if (treeview.$activeItem != null) {
        treeview.$activeItem.removeClass(classFocused);
        treeview.$activeItem = null;
      }
      return true;
    });
  }

  function destroy() {
    /* TODO */
  }

  function _addA11y($el) {
    $el.attr('role', 'tree');

    // Put role="treeitem" on every LI
    // Put aria-expanded="false" on every LI (if it has no aria-expanded attr)
    // Put tabindex="-1" on every LI (if it's not the first one)
    // Put class=<classParent> on every LI that contains an UL
    $el.find('li').each(function (i, li) {
      var $li = (0, _jquery2['default'])(li);
      $li.attr('role', 'treeitem');
      // .attr('tabindex', (0 === i) ? '0' : '-1')
      //  .find('a[href]').not('[href^=#]').attr('tabindex', 0)
      //  .parent().attr('aria-label', function() { return $(this).text() })
      if ($li.find('ul').length !== 0) {

        $li.children('a').not("[href='#']").append('<span class="' + classMenuHandler + ' ' + styleMenuHandlerStandalone + '"\n              aria-label="' + ariaLabelHandler + '" role="button" tabindex="0"></span>');

        $li.children("a[href='#']").addClass(classMenuHandler).addClass(styleMenuHandler).attr('aria-label', ariaLabelHandler).attr('role', 'button');

        var containsExpandedLink = $li.find('[aria-expanded=true]').length > 0 || $li.find('.is-current').length > 0;

        if (!li.hasAttribute('aria-expanded') && !containsExpandedLink) {
          $li.attr('aria-expanded', 'false');
        } else if (containsExpandedLink) {
          $li.attr('aria-expanded', 'true');
        }
        $li.addClass(classParent);
      }
    });
    // Put role="group" on every contained UL
    $el.find('ul').attr('role', 'group');
  }

  function init() {
    (0, _jquery2['default'])(selector).each(function (_, treeviewContainer) {
      var $el = (0, _jquery2['default'])(treeviewContainer);
      _addA11y($el);
      var treeview = {
        $el: $el,
        $items: $el.find('li'),
        $parents: $el.find('.' + classParent),
        $handlers: $el.find('.' + classMenuHandler),
        $visibleItems: null,
        $activeItem: null
      };
      _collapseAll(treeview);
      _bindEvents(treeview);
    });
  }

  init();

  // REVEAL API
  return {
    init: init,
    destroy: destroy
  };
};

new Treeview();

exports['default'] = {
  Treeview: Treeview
};
module.exports = exports['default'];

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jquery = __webpack_require__(0);

var _jquery2 = _interopRequireDefault(_jquery);

var _headroom = __webpack_require__(30);

var _headroom2 = _interopRequireDefault(_headroom);

var _throttle = __webpack_require__(3);

var _throttle2 = _interopRequireDefault(_throttle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

// Headroom for fixed sticky header

var myElement = document.querySelector('.js-Headroom');

var opts = {
  // vertical offset in px before element is first unpinned
  offset: 0,
  // you can specify tolerance individually for up/down scroll
  tolerance: {
    up: 20,
    down: 10
  },
  // css classes to apply
  classes: {
    // when element is initialised
    initial: 'Headroom',
    // when scrolling up
    pinned: 'Headroom--pinned',
    // when scrolling down
    unpinned: 'Headroom--unpinned',
    // when above offset
    top: 'Headroom--top',
    // when below offset
    notTop: 'Headroom--not-top',
    // when at bottom of scoll area
    bottom: 'Headroom--bottom',
    // when not at bottom of scroll area
    notBottom: 'Headroom--not-bottom'
  },
  // element to listen to scroll events on, defaults to `window`
  scroller: window,
  // callback when pinned, `this` is headroom object
  onPin: function onPin() {},
  // callback when unpinned, `this` is headroom object
  onUnpin: function onUnpin() {},
  // callback when above offset, `this` is headroom object
  onTop: function onTop() {},
  // callback when below offset, `this` is headroom object
  onNotTop: function onNotTop() {},
  // callback when at bottom of page, `this` is headroom object
  onBottom: function onBottom() {},
  // callback when moving away from bottom of page, `this` is headroom object
  onNotBottom: function onNotBottom() {}
};

var headroom = null;

if (myElement) {
  headroom = new _headroom2['default'](myElement, opts);
  headroom.init();
}

/* *	Make space when using fixed header. * *		The no-js alternative is to set up body padding inside CSS *	 	assuming you know the exact header height in pixel *	 	(expanded and minimized for all viewport width) */
var headroomFixed = '.Headroom--fixed';

if ((0, _jquery2['default'])('.' + opts.classes.initial).is(headroomFixed)) {
  var INTERVAL = 250;

  var windowWidth = (0, _jquery2['default'])(window).width();

  // Needs to be here due to CSS transition (see on Safari)
  var headerHeight = (0, _jquery2['default'])(headroomFixed).height();

  var _adjustPadding = function _adjustPadding() {
    var paddingTop = headerHeight;

    (0, _jquery2['default'])('body').css({
      paddingTop: paddingTop + 'px'
    });
  };

  // Set up padding on page load
  (0, _jquery2['default'])(document).ready(function () {
    (0, _jquery2['default'])(headroomFixed).css({
      position: 'fixed',
      top: 0
    });
    _adjustPadding();
  });

  // Make padding respond to window resize
  (0, _jquery2['default'])(window).resize((0, _throttle2['default'])(INTERVAL, function () {
    var newWindowWidth = (0, _jquery2['default'])(window).width();
    var height = (0, _jquery2['default'])(headroomFixed).height();
    // Android browser triggers a resize event on scroll to top
    // so we check for changes in window width
    if (newWindowWidth !== windowWidth) {
      windowWidth = newWindowWidth;
      headerHeight = height;
      setTimeout(_adjustPadding, INTERVAL);
    }
  }));

  (0, _jquery2['default'])(headroomFixed).on('transitionend', (0, _throttle2['default'])(INTERVAL, function () {
    var height = (0, _jquery2['default'])(this).height();
    if (headerHeight < height) {
      // This happens *only* after a resize
      // _and_ when scrolling to top
      headerHeight = height;
      _adjustPadding();
    }
  }));
}

/* *  Toggle search-form visibility for mobile */
(0, _jquery2['default'])('.js-Header-search-trigger').click(function (e) {
  (0, _jquery2['default'])('.js-Header-search-trigger').each(function (i, el) {
    var $el = (0, _jquery2['default'])(el);
    if ('true' === $el.attr('aria-hidden')) {
      $el.attr('aria-hidden', 'false');
      $el.removeClass('u-hidden');
    } else {
      $el.attr('aria-hidden', 'true');
      $el.addClass('u-hidden');
    }
  });
  var $searchBox = (0, _jquery2['default'])('#' + (0, _jquery2['default'])(e.target).attr('aria-controls'));
  $searchBox.toggleClass('is-active');
  $searchBox.parent().toggle();
});

exports['default'] = {
  Headroom: _headroom2['default'],
  headroom: headroom
};
module.exports = exports['default'];

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * headroom.js v0.9.4 - Give your page some headroom. Hide your header until you need it
 * Copyright (c) 2017 Nick Williams - http://wicky.nillia.ms/headroom.js
 * License: MIT
 */

(function (root, factory) {
  'use strict';

  if (true) {
    // AMD. Register as an anonymous module.
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
    // COMMONJS
    module.exports = factory();
  } else {
    // BROWSER
    root.Headroom = factory();
  }
})(undefined, function () {
  'use strict';

  /* exported features */

  var features = {
    bind: !!function () {}.bind,
    classList: 'classList' in document.documentElement,
    rAF: !!(window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame)
  };
  window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame;

  /**
   * Handles debouncing of events via requestAnimationFrame
   * @see http://www.html5rocks.com/en/tutorials/speed/animations/
   * @param {Function} callback The callback to handle whichever event
   */
  function Debouncer(callback) {
    this.callback = callback;
    this.ticking = false;
  }
  Debouncer.prototype = {
    constructor: Debouncer,

    /**
     * dispatches the event to the supplied callback
     * @private
     */
    update: function update() {
      this.callback && this.callback();
      this.ticking = false;
    },

    /**
     * ensures events don't get stacked
     * @private
     */
    requestTick: function requestTick() {
      if (!this.ticking) {
        requestAnimationFrame(this.rafCallback || (this.rafCallback = this.update.bind(this)));
        this.ticking = true;
      }
    },

    /**
     * Attach this as the event listeners
     */
    handleEvent: function handleEvent() {
      this.requestTick();
    }
  };
  /**
   * Check if object is part of the DOM
   * @constructor
   * @param {Object} obj element to check
   */
  function isDOMElement(obj) {
    return obj && typeof window !== 'undefined' && (obj === window || obj.nodeType);
  }

  /**
   * Helper function for extending objects
   */
  function extend(object /*, objectN ... */) {
    if (arguments.length <= 0) {
      throw new Error('Missing arguments in extend function');
    }

    var result = object || {},
        key,
        i;

    for (i = 1; i < arguments.length; i++) {
      var replacement = arguments[i] || {};

      for (key in replacement) {
        // Recurse into object except if the object is a DOM element
        if (_typeof(result[key]) === 'object' && !isDOMElement(result[key])) {
          result[key] = extend(result[key], replacement[key]);
        } else {
          result[key] = result[key] || replacement[key];
        }
      }
    }

    return result;
  }

  /**
   * Helper function for normalizing tolerance option to object format
   */
  function normalizeTolerance(t) {
    return t === Object(t) ? t : { down: t, up: t };
  }

  /**
   * UI enhancement for fixed headers.
   * Hides header when scrolling down
   * Shows header when scrolling up
   * @constructor
   * @param {DOMElement} elem the header element
   * @param {Object} options options for the widget
   */
  function Headroom(elem, options) {
    options = extend(options, Headroom.options);

    this.lastKnownScrollY = 0;
    this.elem = elem;
    this.tolerance = normalizeTolerance(options.tolerance);
    this.classes = options.classes;
    this.offset = options.offset;
    this.scroller = options.scroller;
    this.initialised = false;
    this.onPin = options.onPin;
    this.onUnpin = options.onUnpin;
    this.onTop = options.onTop;
    this.onNotTop = options.onNotTop;
    this.onBottom = options.onBottom;
    this.onNotBottom = options.onNotBottom;
  }
  Headroom.prototype = {
    constructor: Headroom,

    /**
     * Initialises the widget
     */
    init: function init() {
      if (!Headroom.cutsTheMustard) {
        return;
      }

      this.debouncer = new Debouncer(this.update.bind(this));
      this.elem.classList.add(this.classes.initial);

      // defer event registration to handle browser
      // potentially restoring previous scroll position
      setTimeout(this.attachEvent.bind(this), 100);

      return this;
    },

    /**
     * Unattaches events and removes any classes that were added
     */
    destroy: function destroy() {
      var classes = this.classes;

      this.initialised = false;

      for (var key in classes) {
        if (classes.hasOwnProperty(key)) {
          this.elem.classList.remove(classes[key]);
        }
      }

      this.scroller.removeEventListener('scroll', this.debouncer, false);
    },

    /**
     * Attaches the scroll event
     * @private
     */
    attachEvent: function attachEvent() {
      if (!this.initialised) {
        this.lastKnownScrollY = this.getScrollY();
        this.initialised = true;
        this.scroller.addEventListener('scroll', this.debouncer, false);

        this.debouncer.handleEvent();
      }
    },

    /**
     * Unpins the header if it's currently pinned
     */
    unpin: function unpin() {
      var classList = this.elem.classList,
          classes = this.classes;

      if (classList.contains(classes.pinned) || !classList.contains(classes.unpinned)) {
        classList.add(classes.unpinned);
        classList.remove(classes.pinned);
        this.onUnpin && this.onUnpin.call(this);
      }
    },

    /**
     * Pins the header if it's currently unpinned
     */
    pin: function pin() {
      var classList = this.elem.classList,
          classes = this.classes;

      if (classList.contains(classes.unpinned)) {
        classList.remove(classes.unpinned);
        classList.add(classes.pinned);
        this.onPin && this.onPin.call(this);
      }
    },

    /**
     * Handles the top states
     */
    top: function top() {
      var classList = this.elem.classList,
          classes = this.classes;

      if (!classList.contains(classes.top)) {
        classList.add(classes.top);
        classList.remove(classes.notTop);
        this.onTop && this.onTop.call(this);
      }
    },

    /**
     * Handles the not top state
     */
    notTop: function notTop() {
      var classList = this.elem.classList,
          classes = this.classes;

      if (!classList.contains(classes.notTop)) {
        classList.add(classes.notTop);
        classList.remove(classes.top);
        this.onNotTop && this.onNotTop.call(this);
      }
    },

    bottom: function bottom() {
      var classList = this.elem.classList,
          classes = this.classes;

      if (!classList.contains(classes.bottom)) {
        classList.add(classes.bottom);
        classList.remove(classes.notBottom);
        this.onBottom && this.onBottom.call(this);
      }
    },

    /**
     * Handles the not top state
     */
    notBottom: function notBottom() {
      var classList = this.elem.classList,
          classes = this.classes;

      if (!classList.contains(classes.notBottom)) {
        classList.add(classes.notBottom);
        classList.remove(classes.bottom);
        this.onNotBottom && this.onNotBottom.call(this);
      }
    },

    /**
     * Gets the Y scroll position
     * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.scrollY
     * @return {Number} pixels the page has scrolled along the Y-axis
     */
    getScrollY: function getScrollY() {
      return this.scroller.pageYOffset !== undefined ? this.scroller.pageYOffset : this.scroller.scrollTop !== undefined ? this.scroller.scrollTop : (document.documentElement || document.body.parentNode || document.body).scrollTop;
    },

    /**
     * Gets the height of the viewport
     * @see http://andylangton.co.uk/blog/development/get-viewport-size-width-and-height-javascript
     * @return {int} the height of the viewport in pixels
     */
    getViewportHeight: function getViewportHeight() {
      return window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
    },

    /**
     * Gets the physical height of the DOM element
     * @param  {Object}  elm the element to calculate the physical height of which
     * @return {int}     the physical height of the element in pixels
     */
    getElementPhysicalHeight: function getElementPhysicalHeight(elm) {
      return Math.max(elm.offsetHeight, elm.clientHeight);
    },

    /**
     * Gets the physical height of the scroller element
     * @return {int} the physical height of the scroller element in pixels
     */
    getScrollerPhysicalHeight: function getScrollerPhysicalHeight() {
      return this.scroller === window || this.scroller === document.body ? this.getViewportHeight() : this.getElementPhysicalHeight(this.scroller);
    },

    /**
     * Gets the height of the document
     * @see http://james.padolsey.com/javascript/get-document-height-cross-browser/
     * @return {int} the height of the document in pixels
     */
    getDocumentHeight: function getDocumentHeight() {
      var body = document.body,
          documentElement = document.documentElement;

      return Math.max(body.scrollHeight, documentElement.scrollHeight, body.offsetHeight, documentElement.offsetHeight, body.clientHeight, documentElement.clientHeight);
    },

    /**
     * Gets the height of the DOM element
     * @param  {Object}  elm the element to calculate the height of which
     * @return {int}     the height of the element in pixels
     */
    getElementHeight: function getElementHeight(elm) {
      return Math.max(elm.scrollHeight, elm.offsetHeight, elm.clientHeight);
    },

    /**
     * Gets the height of the scroller element
     * @return {int} the height of the scroller element in pixels
     */
    getScrollerHeight: function getScrollerHeight() {
      return this.scroller === window || this.scroller === document.body ? this.getDocumentHeight() : this.getElementHeight(this.scroller);
    },

    /**
     * determines if the scroll position is outside of document boundaries
     * @param  {int}  currentScrollY the current y scroll position
     * @return {bool} true if out of bounds, false otherwise
     */
    isOutOfBounds: function isOutOfBounds(currentScrollY) {
      var pastTop = currentScrollY < 0,
          pastBottom = currentScrollY + this.getScrollerPhysicalHeight() > this.getScrollerHeight();

      return pastTop || pastBottom;
    },

    /**
     * determines if the tolerance has been exceeded
     * @param  {int} currentScrollY the current scroll y position
     * @return {bool} true if tolerance exceeded, false otherwise
     */
    toleranceExceeded: function toleranceExceeded(currentScrollY, direction) {
      return Math.abs(currentScrollY - this.lastKnownScrollY) >= this.tolerance[direction];
    },

    /**
     * determine if it is appropriate to unpin
     * @param  {int} currentScrollY the current y scroll position
     * @param  {bool} toleranceExceeded has the tolerance been exceeded?
     * @return {bool} true if should unpin, false otherwise
     */
    shouldUnpin: function shouldUnpin(currentScrollY, toleranceExceeded) {
      var scrollingDown = currentScrollY > this.lastKnownScrollY,
          pastOffset = currentScrollY >= this.offset;

      return scrollingDown && pastOffset && toleranceExceeded;
    },

    /**
     * determine if it is appropriate to pin
     * @param  {int} currentScrollY the current y scroll position
     * @param  {bool} toleranceExceeded has the tolerance been exceeded?
     * @return {bool} true if should pin, false otherwise
     */
    shouldPin: function shouldPin(currentScrollY, toleranceExceeded) {
      var scrollingUp = currentScrollY < this.lastKnownScrollY,
          pastOffset = currentScrollY <= this.offset;

      return scrollingUp && toleranceExceeded || pastOffset;
    },

    /**
     * Handles updating the state of the widget
     */
    update: function update() {
      var currentScrollY = this.getScrollY(),
          scrollDirection = currentScrollY > this.lastKnownScrollY ? 'down' : 'up',
          toleranceExceeded = this.toleranceExceeded(currentScrollY, scrollDirection);

      if (this.isOutOfBounds(currentScrollY)) {
        // Ignore bouncy scrolling in OSX
        return;
      }

      if (currentScrollY <= this.offset) {
        this.top();
      } else {
        this.notTop();
      }

      if (currentScrollY + this.getViewportHeight() >= this.getScrollerHeight()) {
        this.bottom();
      } else {
        this.notBottom();
      }

      if (this.shouldUnpin(currentScrollY, toleranceExceeded)) {
        this.unpin();
      } else if (this.shouldPin(currentScrollY, toleranceExceeded)) {
        this.pin();
      }

      this.lastKnownScrollY = currentScrollY;
    }
  };
  /**
   * Default options
   * @type {Object}
   */
  Headroom.options = {
    tolerance: {
      up: 0,
      down: 0
    },
    offset: 0,
    scroller: window,
    classes: {
      pinned: 'headroom--pinned',
      unpinned: 'headroom--unpinned',
      top: 'headroom--top',
      notTop: 'headroom--not-top',
      bottom: 'headroom--bottom',
      notBottom: 'headroom--not-bottom',
      initial: 'headroom'
    }
  };
  Headroom.cutsTheMustard = typeof features !== 'undefined' && features.rAF && features.bind && features.classList;

  return Headroom;
});

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _promisePolyfill = __webpack_require__(32);

var _promisePolyfill2 = _interopRequireDefault(_promisePolyfill);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

if (!window.Promise) {
  window.Promise = _promisePolyfill2['default'];
} /* Promise polyfill for IE10 */


__webpack_require__(36);
__webpack_require__(37);
__webpack_require__(38);
__webpack_require__(39);

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(setImmediate) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (root) {

  // Store setTimeout reference so promise-polyfill will be unaffected by
  // other code modifying setTimeout (like sinon.useFakeTimers())
  var setTimeoutFunc = setTimeout;

  function noop() {}

  // Polyfill for Function.prototype.bind
  function bind(fn, thisArg) {
    return function () {
      fn.apply(thisArg, arguments);
    };
  }

  function Promise(fn) {
    if (_typeof(this) !== 'object') throw new TypeError('Promises must be constructed via new');
    if (typeof fn !== 'function') throw new TypeError('not a function');
    this._state = 0;
    this._handled = false;
    this._value = undefined;
    this._deferreds = [];

    doResolve(fn, this);
  }

  function handle(self, deferred) {
    while (self._state === 3) {
      self = self._value;
    }
    if (self._state === 0) {
      self._deferreds.push(deferred);
      return;
    }
    self._handled = true;
    Promise._immediateFn(function () {
      var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;
      if (cb === null) {
        (self._state === 1 ? resolve : reject)(deferred.promise, self._value);
        return;
      }
      var ret;
      try {
        ret = cb(self._value);
      } catch (e) {
        reject(deferred.promise, e);
        return;
      }
      resolve(deferred.promise, ret);
    });
  }

  function resolve(self, newValue) {
    try {
      // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
      if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.');
      if (newValue && ((typeof newValue === 'undefined' ? 'undefined' : _typeof(newValue)) === 'object' || typeof newValue === 'function')) {
        var then = newValue.then;
        if (newValue instanceof Promise) {
          self._state = 3;
          self._value = newValue;
          finale(self);
          return;
        } else if (typeof then === 'function') {
          doResolve(bind(then, newValue), self);
          return;
        }
      }
      self._state = 1;
      self._value = newValue;
      finale(self);
    } catch (e) {
      reject(self, e);
    }
  }

  function reject(self, newValue) {
    self._state = 2;
    self._value = newValue;
    finale(self);
  }

  function finale(self) {
    if (self._state === 2 && self._deferreds.length === 0) {
      Promise._immediateFn(function () {
        if (!self._handled) {
          Promise._unhandledRejectionFn(self._value);
        }
      });
    }

    for (var i = 0, len = self._deferreds.length; i < len; i++) {
      handle(self, self._deferreds[i]);
    }
    self._deferreds = null;
  }

  function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
  }

  /**
   * Take a potentially misbehaving resolver function and make sure
   * onFulfilled and onRejected are only called once.
   *
   * Makes no guarantees about asynchrony.
   */
  function doResolve(fn, self) {
    var done = false;
    try {
      fn(function (value) {
        if (done) return;
        done = true;
        resolve(self, value);
      }, function (reason) {
        if (done) return;
        done = true;
        reject(self, reason);
      });
    } catch (ex) {
      if (done) return;
      done = true;
      reject(self, ex);
    }
  }

  Promise.prototype['catch'] = function (onRejected) {
    return this.then(null, onRejected);
  };

  Promise.prototype.then = function (onFulfilled, onRejected) {
    var prom = new this.constructor(noop);

    handle(this, new Handler(onFulfilled, onRejected, prom));
    return prom;
  };

  Promise.all = function (arr) {
    var args = Array.prototype.slice.call(arr);

    return new Promise(function (resolve, reject) {
      if (args.length === 0) return resolve([]);
      var remaining = args.length;

      function res(i, val) {
        try {
          if (val && ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object' || typeof val === 'function')) {
            var then = val.then;
            if (typeof then === 'function') {
              then.call(val, function (val) {
                res(i, val);
              }, reject);
              return;
            }
          }
          args[i] = val;
          if (--remaining === 0) {
            resolve(args);
          }
        } catch (ex) {
          reject(ex);
        }
      }

      for (var i = 0; i < args.length; i++) {
        res(i, args[i]);
      }
    });
  };

  Promise.resolve = function (value) {
    if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value.constructor === Promise) {
      return value;
    }

    return new Promise(function (resolve) {
      resolve(value);
    });
  };

  Promise.reject = function (value) {
    return new Promise(function (resolve, reject) {
      reject(value);
    });
  };

  Promise.race = function (values) {
    return new Promise(function (resolve, reject) {
      for (var i = 0, len = values.length; i < len; i++) {
        values[i].then(resolve, reject);
      }
    });
  };

  // Use polyfill for setImmediate for performance gains
  Promise._immediateFn = typeof setImmediate === 'function' && function (fn) {
    setImmediate(fn);
  } || function (fn) {
    setTimeoutFunc(fn, 0);
  };

  Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {
    if (typeof console !== 'undefined' && console) {
      console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console
    }
  };

  /**
   * Set the immediate function to execute callbacks
   * @param fn {function} Function to execute
   * @deprecated
   */
  Promise._setImmediateFn = function _setImmediateFn(fn) {
    Promise._immediateFn = fn;
  };

  /**
   * Change the function to execute on unhandled rejection
   * @param {function} fn Function to execute on unhandled rejection
   * @deprecated
   */
  Promise._setUnhandledRejectionFn = function _setUnhandledRejectionFn(fn) {
    Promise._unhandledRejectionFn = fn;
  };

  if (typeof module !== 'undefined' && module.exports) {
    module.exports = Promise;
  } else if (!root.Promise) {
    root.Promise = Promise;
  }
})(undefined);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(33).setImmediate))

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function () {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function () {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout = exports.clearInterval = function (timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function () {};
Timeout.prototype.close = function () {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function (item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function (item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function (item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout) item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(34);
exports.setImmediate = setImmediate;
exports.clearImmediate = clearImmediate;

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
        // Callback can either be a function or a string
        if (typeof callback !== "function") {
            callback = new Function("" + callback);
        }
        // Copy function arguments
        var args = new Array(arguments.length - 1);
        for (var i = 0; i < args.length; i++) {
            args[i] = arguments[i + 1];
        }
        // Store and register the task
        var task = { callback: callback, args: args };
        tasksByHandle[nextHandle] = task;
        registerImmediate(nextHandle);
        return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
            case 0:
                callback();
                break;
            case 1:
                callback(args[0]);
                break;
            case 2:
                callback(args[0], args[1]);
                break;
            case 3:
                callback(args[0], args[1], args[2]);
                break;
            default:
                callback.apply(undefined, args);
                break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function registerImmediate(handle) {
            process.nextTick(function () {
                runIfPresent(handle);
            });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function () {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function onGlobalMessage(event) {
            if (event.source === global && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function registerImmediate(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function (event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function registerImmediate(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function registerImmediate(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function registerImmediate(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();
    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();
    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();
    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();
    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
})(typeof self === "undefined" ? typeof global === "undefined" ? undefined : global : self);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(35)))

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
    return [];
};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {
    return 0;
};

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* Fork from https://html5boilerplate.com/ */
// Avoid `console` errors in browsers that lack a console.

var method = null;
var noop = function noop() {};
var methods = ['assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error', 'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log', 'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd', 'timeStamp', 'trace', 'warn'];
var length = methods.length;
var console = window.console = window.console || {};

while (length--) {
  method = methods[length];
  if (!console[method]) {
    console[method] = noop;
  }
}

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _jquery = __webpack_require__(0);

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

(0, _jquery2['default'])(function () {
  (0, _jquery2['default'])(document).bind('enhance', function () {
    (0, _jquery2['default'])('body').addClass('enhanced');
  });
  (0, _jquery2['default'])(document).trigger('enhance');
});

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _jquery = __webpack_require__(0);

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

(0, _jquery2['default'])(document).ready(function () {
  var $header = (0, _jquery2['default'])('header');
  (0, _jquery2['default'])('.js-scrollTo').on('click', function () {
    var offset = (0, _jquery2['default'])(_jquery2['default'].attr(this, 'href')).offset();
    (0, _jquery2['default'])('html, body').animate({
      scrollTop: (offset ? offset.top : 0) - ($header.length && $header.css('position') === 'fixed' ? $header.height() : 0)
    }, 250);
  });
});

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _jquery = __webpack_require__(0);

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/* @see index.css */
var NOFOCUS_CLASSNAME = 'c-hideFocus';

(0, _jquery2['default'])(document).on('keydown', function (e) {
  if (e.keyCode === 9) {
    (0, _jquery2['default'])('body').removeClass(NOFOCUS_CLASSNAME);
  }
});

(0, _jquery2['default'])(document).on('click', function () {
  return (0, _jquery2['default'])('body').addClass(NOFOCUS_CLASSNAME);
});
(0, _jquery2['default'])('body').addClass(NOFOCUS_CLASSNAME);

/***/ }),
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var Config = __webpack_require__(47);

/* eslint-disable */
if (window.__PUBLIC_PATH__) {
  __webpack_require__.p = window.__PUBLIC_PATH__;
}
/* eslint-enable */

function _findIndex(ar, predicate) {
  for (var index = 0; index < ar.length; index++) {
    if (predicate(ar[index])) {
      return index;
    }
  }
  return -1;
}
/*
 *	Every index.js found in src/** directory will be required.
 *
 * 	Too exclude components or modules
 * 	@see config.js
 */
function requireAll(requireContext) {
  var keys = [];

  requireContext.keys().forEach(function (filename) {
    var dirname = filename.replace(/\\/g, '/').replace(/\/[^\/]*$/, '');

    var exclude = -1 !== _findIndex(Config.excludes, function (v) {
      return dirname.match(new RegExp(v)) !== null;
    });

    var include = !exclude && (Config.includes.length === 0 || -1 !== _findIndex(Config.includes, function (v) {
      return dirname.match(new RegExp(v)) !== null;
    }));

    if (include) {
      // console.log('including: %s', dirname)
      keys.push(filename);
    } else {
      // console.log('excluding: %s', dirname)
    }
  });
  return keys.map(requireContext);
}

exports['default'] = requireAll(__webpack_require__(4));
module.exports = exports['default'];

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var CONFIG = {};

/*
 *  Whitelist: use this array of RegEx to include ONLY specific components
 *  or modules into the final build.
 *
 *  __Example, to include just header + search form + offcanvas:
 *
 *   CONFIG.includes = [
 *          '(.*)base(.*)',
 *          '(.*)button(.*)',
 *          '(.*)components(.*)',
 *          '(.*)theme(.*)',
 *          '(.*)utils(.*)',
 *          '(.*)icons(.*)',
 *          '(.*)hamburger(.*)',
 *          '(.*)offcanvas(.*)',
 *          '(.*)linklist(.*)',
 *          '(.*)treeview(.*)',
 *          '(.*)skiplinks(.*)',
 *          '(.*)form(.*)',
 *          '(.*)header(.*)'
 *         ]
 *
 * @see index.css for possible values
 *
 */
CONFIG.includes = [];

/*
 *  Blacklist: use this array of RegEx to exclude specific components
 *  or modules from the final build.
 *
 *    ie. to exclude all global CSS:
 *
 *      CONFIG.excludes = [ '(.*)base(.*)', '(.*)normalize(.*)' ]
 *
 * @see index.css for possible values
 *
 */
CONFIG.excludes = [];

module.exports = CONFIG;

/***/ })
/******/ ]);
});
//# sourceMappingURL=IWT.min.js.map